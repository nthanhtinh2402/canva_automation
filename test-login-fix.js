require('dotenv').config();
const { initializeGologinBrowser, closeBrowser, getPage } = require('./gologin-browser');

async function testLoginFix() {
    try {
        console.log('üß™ === TEST LOGIN FIX: ENHANCED SELECTORS ===');
        
        // Kh·ªüi t·∫°o browser
        console.log('üîÑ Kh·ªüi t·∫°o browser...');
        await initializeGologinBrowser();
        
        const page = getPage();
        if (!page) {
            throw new Error('Kh√¥ng th·ªÉ l·∫•y page instance');
        }
        
        console.log('‚úÖ Browser ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng');
        
        // Test navigate ƒë·∫øn Canva
        console.log('üåê Navigate ƒë·∫øn Canva...');
        await page.goto('https://www.canva.com/login', { 
            waitUntil: 'networkidle0', 
            timeout: 30000 
        });
        
        console.log('‚úÖ ƒê√£ navigate ƒë·∫øn Canva login');
        
        // Test t√¨m email input v·ªõi enhanced selectors
        console.log('üîç Test t√¨m email input v·ªõi enhanced selectors...');
        
        const possibleEmailSelectors = [
            // Canva specific selectors (2024)
            'input[data-testid="email-input"]',
            'input[data-testid="login-email"]',
            'input[data-testid*="email"]',
            'input[aria-label*="email" i]',
            'input[aria-label*="Email"]',
            'input[placeholder*="email" i]',
            'input[placeholder*="Email"]',
            // Standard selectors
            'input[type="email"]',
            'input[name="email"]',
            'input[autocomplete="email"]',
            'input[autocomplete="username"]',
            'input[id*="email" i]',
            'input[class*="email" i]',
            'input[class*="Email"]',
            // Generic fallbacks
            'input[type="text"]',
            'input:not([type="hidden"]):not([type="submit"]):not([type="button"]):not([type="checkbox"]):not([type="radio"])'
        ];
        
        let emailInputSelector = null;
        
        for (const selector of possibleEmailSelectors) {
            try {
                await page.waitForSelector(selector, { visible: true, timeout: 3000 });
                emailInputSelector = selector;
                console.log(`‚úÖ T√¨m th·∫•y email input v·ªõi selector: ${selector}`);
                break;
            } catch (e) {
                console.log(`‚ùå Kh√¥ng t√¨m th·∫•y v·ªõi selector: ${selector}`);
            }
        }
        
        if (!emailInputSelector) {
            // Enhanced fallback: T√¨m t·∫•t c·∫£ input visible
            console.log('üîç Enhanced fallback: T√¨m t·∫•t c·∫£ input visible...');
            
            const visibleInputs = await page.evaluate(() => {
                const inputs = Array.from(document.querySelectorAll('input'));
                return inputs.filter(input => input.offsetParent !== null).map(input => ({
                    tagName: input.tagName,
                    type: input.type,
                    name: input.name,
                    placeholder: input.placeholder,
                    id: input.id,
                    className: input.className,
                    ariaLabel: input.getAttribute('aria-label'),
                    dataTestId: input.getAttribute('data-testid')
                }));
            });
            
            console.log(`üîç Found ${visibleInputs.length} visible inputs:`, visibleInputs);
            
            if (visibleInputs.length > 0) {
                emailInputSelector = 'input[type="text"], input[type="email"], input:not([type="hidden"]):not([type="submit"]):not([type="button"]):not([type="checkbox"]):not([type="radio"])';
                console.log(`‚úÖ S·ª≠ d·ª•ng fallback selector`);
            } else {
                console.log('‚ùå Kh√¥ng t√¨m th·∫•y input n√†o');
                
                // Ch·ª•p screenshot ƒë·ªÉ debug
                await page.screenshot({ path: 'login-test-debug.png', fullPage: true });
                console.log('üì∏ Screenshot saved: login-test-debug.png');
                
                throw new Error('Kh√¥ng t√¨m th·∫•y email input');
            }
        }
        
        // Test type email
        if (emailInputSelector) {
            console.log(`üß™ Test type email v·ªõi selector: ${emailInputSelector}`);
            
            try {
                await page.type(emailInputSelector, 'test@gmail.com', { delay: 50 });
                console.log('‚úÖ Type email th√†nh c√¥ng!');
                
                // Ch·ª•p screenshot k·∫øt qu·∫£
                await page.screenshot({ path: 'login-test-success.png', fullPage: true });
                console.log('üì∏ Success screenshot saved: login-test-success.png');
                
            } catch (typeError) {
                console.log('‚ùå L·ªói khi type email:', typeError.message);
                
                // Ch·ª•p screenshot l·ªói
                await page.screenshot({ path: 'login-test-type-error.png', fullPage: true });
                console.log('üì∏ Error screenshot saved: login-test-type-error.png');
            }
        }
        
        console.log('\nüéØ === K·∫æT QU·∫¢ TEST ===');
        console.log(`‚úÖ Enhanced selectors: ${possibleEmailSelectors.length} selectors`);
        console.log(`‚úÖ Found working selector: ${emailInputSelector || 'None'}`);
        console.log(`‚úÖ Type test: ${emailInputSelector ? 'Success' : 'Failed'}`);
        
        console.log('\nüöÄ === FIX HO√ÄN TH√ÄNH ===');
        console.log('‚úÖ 1. Enhanced selectors v·ªõi Canva 2024');
        console.log('‚úÖ 2. Better fallback logic');
        console.log('‚úÖ 3. Detailed debugging info');
        console.log('‚úÖ 4. Safety checks tr∆∞·ªõc khi type');
        
    } catch (error) {
        console.error('‚ùå L·ªói test:', error.message);
    } finally {
        // ƒê√≥ng browser
        try {
            await closeBrowser();
            console.log('‚úÖ ƒê√£ ƒë√≥ng browser');
        } catch (closeError) {
            console.log('‚ö†Ô∏è L·ªói ƒë√≥ng browser:', closeError.message);
        }
    }
}

testLoginFix();
