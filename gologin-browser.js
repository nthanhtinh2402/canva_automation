const { GoLogin } = require('gologin');
const puppeteer = require('puppeteer-core');
const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');

let browser;
let page;
let gologin;

// Headless toggle via ENV
const HEADLESS_ENV = (process.env.HEADLESS || 'false').toLowerCase();
const IS_HEADLESS = HEADLESS_ENV === 'true' || HEADLESS_ENV === '1' || HEADLESS_ENV === 'yes';

const GOLOGIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ODY5ZWZiYmJhZWFhYmU0ZjNjYmU1NjAiLCJ0eXBlIjoiZGV2Iiwiand0aWQiOiI2ODY5ZjA2MmM2ZDBmMmM2MmQ4YTliYWYifQ.8-pL-goXMs-7e_H7Rb3CcEh017ztWiyoMgqKX8yZgOo';
const PROFILE_ID = '6869eff066690ae8297cac35';

// ƒê∆∞·ªùng d·∫´n l∆∞u user data
const USER_DATA_DIR = path.join(__dirname, 'user-data');
const SESSION_FILE = path.join(USER_DATA_DIR, 'canva-session.json');

// T·∫°o th∆∞ m·ª•c user-data n·∫øu ch∆∞a c√≥
if (!fs.existsSync(USER_DATA_DIR)) {
    fs.mkdirSync(USER_DATA_DIR, { recursive: true });
    console.log('‚úì ƒê√£ t·∫°o th∆∞ m·ª•c user-data');
}
// Force using pure Puppeteer headless (skip GoLogin connect) when requested
const HEADLESS_FORCE_PURE = (process.env.HEADLESS_FORCE_PURE || 'false').toLowerCase() === 'true';
// Extra params for GoLogin start (space-separated), e.g. "--headless=new --disable-gpu"
const GOLOGIN_EXTRA_PARAMS = (process.env.GOLOGIN_EXTRA_PARAMS || '').trim();
function parseExtraParams(str) {
    if (!str) return [];
    // naive split by space respecting quoted strings could be added; keep simple
    return str.split(/\s+/).filter(Boolean);
}


// H√†m l∆∞u session data
async function saveSessionData(page) {
    try {
        console.log('ƒêang l∆∞u session data...');

        // L·∫•y cookies
        const cookies = await page.cookies();

        // L·∫•y localStorage
        const localStorage = await page.evaluate(() => {
            const data = {};
            for (let i = 0; i < window.localStorage.length; i++) {
                const key = window.localStorage.key(i);
                data[key] = window.localStorage.getItem(key);
            }
            return data;
        });

        // L·∫•y sessionStorage
        const sessionStorage = await page.evaluate(() => {
            const data = {};
            for (let i = 0; i < window.sessionStorage.length; i++) {
                const key = window.sessionStorage.key(i);
                data[key] = window.sessionStorage.getItem(key);
            }
            return data;
        });

        const sessionData = {
            cookies,
            localStorage,
            sessionStorage,
            timestamp: Date.now(),
            url: await page.url(),
            userAgent: await page.evaluate(() => navigator.userAgent),
            viewport: await page.viewport()
        };

        fs.writeFileSync(SESSION_FILE, JSON.stringify(sessionData, null, 2));

        // L∆∞u ri√™ng cookies ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng
        const cookiesFile = path.join(USER_DATA_DIR, 'canva-cookies.json');
        const cookieData = {
            cookies,
            timestamp: Date.now(),
            domain: 'www.canva.com'
        };
        fs.writeFileSync(cookiesFile, JSON.stringify(cookieData, null, 2));

        console.log('‚úì ƒê√£ l∆∞u session data v√† cookies th√†nh c√¥ng');
        console.log(`‚úì Session file: ${SESSION_FILE}`);
        console.log(`‚úì Cookies file: ${cookiesFile}`);

    } catch (error) {
        console.log('L·ªói khi l∆∞u session data:', error.message);
    }
}

// H√†m kh√¥i ph·ª•c session data
async function restoreSessionData(page) {
    try {
        if (!fs.existsSync(SESSION_FILE)) {
            console.log('Kh√¥ng t√¨m th·∫•y session data ƒë√£ l∆∞u');
            return false;
        }

        console.log('ƒêang kh√¥i ph·ª•c session data...');
        const sessionData = JSON.parse(fs.readFileSync(SESSION_FILE, 'utf8'));

        // Ki·ªÉm tra session c√≥ qu√° c≈© kh√¥ng (7 ng√†y)
        const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 ng√†y
        if (Date.now() - sessionData.timestamp > maxAge) {
            console.log('Session data ƒë√£ qu√° c≈©, b·ªè qua kh√¥i ph·ª•c');
            return false;
        }

        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang Canva tr∆∞·ªõc v·ªõi timeout
        try {
            console.log('üåê ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn Canva ƒë·ªÉ kh√¥i ph·ª•c session...');
            await page.goto('https://www.canva.com', {
                waitUntil: 'networkidle0',
                timeout: 30000
            });
            console.log('‚úì ƒê√£ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn Canva');
        } catch (error) {
            console.log('‚ö†Ô∏è L·ªói ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn Canva:', error.message);
            console.log('üîÑ Th·ª≠ v·ªõi timeout ng·∫Øn h∆°n...');

            try {
                await page.goto('https://www.canva.com', {
                    waitUntil: 'domcontentloaded',
                    timeout: 15000
                });
                console.log('‚úì ƒê√£ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn Canva (fallback)');
            } catch (fallbackError) {
                console.log('‚ùå Kh√¥ng th·ªÉ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn Canva, b·ªè qua kh√¥i ph·ª•c session');
                return false;
            }
        }

        // Kh√¥i ph·ª•c cookies
        if (sessionData.cookies && sessionData.cookies.length > 0) {
            await page.setCookie(...sessionData.cookies);
            console.log('‚úì ƒê√£ kh√¥i ph·ª•c cookies');
        }

        // Kh√¥i ph·ª•c localStorage
        if (sessionData.localStorage) {
            await page.evaluate((data) => {
                for (const [key, value] of Object.entries(data)) {
                    window.localStorage.setItem(key, value);
                }
            }, sessionData.localStorage);
            console.log('‚úì ƒê√£ kh√¥i ph·ª•c localStorage');
        }

        // Kh√¥i ph·ª•c sessionStorage
        if (sessionData.sessionStorage) {
            await page.evaluate((data) => {
                for (const [key, value] of Object.entries(data)) {
                    window.sessionStorage.setItem(key, value);
                }
            }, sessionData.sessionStorage);
            console.log('‚úì ƒê√£ kh√¥i ph·ª•c sessionStorage');
        }

        // Refresh trang ƒë·ªÉ √°p d·ª•ng session
        await page.reload({ waitUntil: 'networkidle0' });
        console.log('‚úì ƒê√£ kh√¥i ph·ª•c session data th√†nh c√¥ng');

        return true;

    } catch (error) {
        console.log('L·ªói khi kh√¥i ph·ª•c session data:', error.message);
        return false;
    }
}

// H√†m load cookies ri√™ng bi·ªát
async function loadCookiesOnly(page) {
    try {
        const cookiesFile = path.join(USER_DATA_DIR, 'canva-cookies.json');

        if (!fs.existsSync(cookiesFile)) {
            console.log('Kh√¥ng t√¨m th·∫•y file cookies');
            return false;
        }

        console.log('ƒêang load cookies...');
        const cookieData = JSON.parse(fs.readFileSync(cookiesFile, 'utf8'));

        // Ki·ªÉm tra cookies c√≥ qu√° c≈© kh√¥ng (3 ng√†y)
        const maxAge = 3 * 24 * 60 * 60 * 1000; // 3 ng√†y
        if (Date.now() - cookieData.timestamp > maxAge) {
            console.log('Cookies ƒë√£ qu√° c≈©, b·ªè qua load');
            return false;
        }

        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang Canva tr∆∞·ªõc
        await page.goto('https://www.canva.com', { waitUntil: 'networkidle0' });

        // Load cookies
        if (cookieData.cookies && cookieData.cookies.length > 0) {
            await page.setCookie(...cookieData.cookies);
            console.log(`‚úì ƒê√£ load ${cookieData.cookies.length} cookies`);

            // Refresh trang ƒë·ªÉ √°p d·ª•ng cookies
            await page.reload({ waitUntil: 'networkidle0' });
            return true;
        }

        return false;

    } catch (error) {
        console.log('L·ªói khi load cookies:', error.message);
        return false;
    }
}

// H√†m x√≥a session data c≈©
function clearSessionData() {
    try {
        if (fs.existsSync(SESSION_FILE)) {
            fs.unlinkSync(SESSION_FILE);
            console.log('‚úì ƒê√£ x√≥a session data c≈©');
        }

        const cookiesFile = path.join(USER_DATA_DIR, 'canva-cookies.json');
        if (fs.existsSync(cookiesFile)) {
            fs.unlinkSync(cookiesFile);
            console.log('‚úì ƒê√£ x√≥a cookies c≈©');
        }
    } catch (error) {
        console.log('L·ªói khi x√≥a session data:', error.message);
    }
}

async function initializeGologinBrowser(profileId = PROFILE_ID) {
    try {
        // ƒê√≥ng browser c≈© n·∫øu c√≥
        if (browser && browser.isConnected()) {
            console.log('ƒê√≥ng tr√¨nh duy·ªát GoLogin c≈©...');
            try {
                await browser.close();
                if (gologin) {
                    await gologin.stop();
                }
            } catch (error) {
                console.log('L·ªói khi ƒë√≥ng tr√¨nh duy·ªát c≈©:', error.message);
            }
        }

        console.log('ƒêang kh·ªüi t·∫°o GoLogin v·ªõi SDK...');

        // Ki·ªÉm tra Chrome path tr∆∞·ªõc
        const chromePath = await getChromePath();
        console.log('Chrome path:', chromePath);

        // N·∫øu √©p ch·∫°y headless thu·∫ßn Puppeteer, b·ªè qua GoLogin connect
        if (HEADLESS_FORCE_PURE && IS_HEADLESS) {
            console.log('‚öôÔ∏è HEADLESS_FORCE_PURE b·∫≠t: b·ªè qua GoLogin, ch·∫°y Puppeteer headless thu·∫ßn.');
            browser = await puppeteer.launch({
                headless: true,
                executablePath: chromePath,
                args: ['--no-sandbox', '--disable-gpu', '--disable-dev-shm-usage']
            });
            page = await browser.newPage();
            return { browser, page };
        }

        // Ki·ªÉm tra token v√† profile ID
        console.log('GoLogin Token:', GOLOGIN_TOKEN ? 'C√≥' : 'Kh√¥ng c√≥');
        console.log('Profile ID:', profileId);

        // S·ª≠ d·ª•ng GoLogin SDK v·ªõi c·∫•u h√¨nh ƒë∆°n gi·∫£n
        gologin = new GoLogin({
            token: GOLOGIN_TOKEN,
            profile_id: profileId,
            executablePath: chromePath,
            skipOrbitaHashChecking: true,
            skipFontsChecking: true,
            skipFontsLoading: true,
        });

        console.log('ƒêang kh·ªüi ƒë·ªông profile GoLogin...');

        // Th√™m timeout cho vi·ªác kh·ªüi ƒë·ªông GoLogin (t√¥n tr·ªçng ch·∫ø ƒë·ªô headless t·ª´ ENV)
        const startOptions = {
            headless: IS_HEADLESS,
            // extra_params ∆∞u ti√™n t·ª´ ENV, sau ƒë√≥ th√™m headless flags n·∫øu IS_HEADLESS
            extra_params: [
                ...parseExtraParams(GOLOGIN_EXTRA_PARAMS),
                ...(IS_HEADLESS ? ['--headless=new', '--disable-gpu', '--disable-dev-shm-usage'] : [])
            ]
        };
        const startPromise = gologin.start(startOptions);
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Timeout: GoLogin start took too long (60s)')), 60000);
        });

        const { status, wsUrl } = await Promise.race([startPromise, timeoutPromise]);

        if (status !== 'success') {
            console.log(`‚ö†Ô∏è GoLogin kh√¥ng th·ªÉ kh·ªüi ƒë·ªông: ${status}, fallback sang Puppeteer...`);
            throw new Error(`GoLogin kh√¥ng th·ªÉ kh·ªüi ƒë·ªông: ${status}`);
        }

        console.log('‚úì GoLogin profile ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng');
        console.log('WebSocket URL:', wsUrl);

        console.log('K·∫øt n·ªëi v·ªõi tr√¨nh duy·ªát GoLogin...');

        // Retry connection v·ªõi timeout
        const maxRetries = 5;

        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                console.log(`üîå Th·ª≠ k·∫øt n·ªëi l·∫ßn ${attempt}/${maxRetries}...`);

                browser = await puppeteer.connect({
                    browserWSEndpoint: wsUrl,
                    ignoreHTTPSErrors: true,
                });

                console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi GoLogin browser! (Ch·∫ø ƒë·ªô hi·ªÉn th·ªã/·∫©n ph·ª• thu·ªôc v√†o c·∫•u h√¨nh profile GoLogin)');
                break;

            } catch (error) {
                console.log(`‚ùå K·∫øt n·ªëi l·∫ßn ${attempt} th·∫•t b·∫°i:`, error.message);

                if (attempt === maxRetries) {
                    throw new Error(`Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi GoLogin browser sau ${maxRetries} l·∫ßn th·ª≠: ${error.message}`);
                }

                // Ch·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i
                console.log(`‚è≥ Ch·ªù ${attempt * 2} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
                await sleep(attempt * 2000);
            }
        }

        // CRITICAL FIX: ƒê√≥ng tab th·ª´a v√† ch·ªâ gi·ªØ 1 tab
        const pages = await browser.pages();
        console.log(`üîç T√¨m th·∫•y ${pages.length} tabs, ƒë√≥ng tab th·ª´a ƒë·ªÉ ti·∫øt ki·ªám t√†i nguy√™n...`);

        // ƒê√≥ng t·∫•t c·∫£ tab tr·ª´ tab ƒë·∫ßu ti√™n
        for (let i = 1; i < pages.length; i++) {
            try {
                await pages[i].close();
                console.log(`‚úÖ ƒê√£ ƒë√≥ng tab th·ª´a ${i + 1}`);
            } catch (closeError) {
                console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë√≥ng tab ${i + 1}:`, closeError.message);
            }
        }

        if (pages.length > 0) {
            page = pages[0];
            console.log(`‚úì ƒê√£ k·∫øt n·ªëi v·ªõi page ƒë·∫ßu ti√™n (gi·ªØ l·∫°i 1/${pages.length} tabs)`);
        } else {
            page = await browser.newPage();
            console.log('‚úì ƒê√£ t·∫°o page m·ªõi');
        }

        // Set viewport
        await page.setViewport({
            width: 1366,
            height: 768
        });

        // Th·ª≠ kh√¥i ph·ª•c session data n·∫øu c√≥
        console.log('Ki·ªÉm tra session data ƒë√£ l∆∞u...');
        const sessionRestored = await restoreSessionData(page);

        if (sessionRestored) {
            console.log('‚úì ƒê√£ kh√¥i ph·ª•c session data th√†nh c√¥ng');
        } else {
            console.log('Kh√¥ng c√≥ session data ho·∫∑c kh√¥ng th·ªÉ kh√¥i ph·ª•c');
        }

        console.log('‚úì GoLogin browser ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng');
        console.log('Profile ID:', gologin.profile_id);

        // Set global variable for compatibility functions
        currentGoLoginBrowser = {
            humanClick: async (selector, options = {}) => {
                await page.waitForSelector(selector, { visible: true, timeout: 10000 });
                await sleep(Math.random() * 500 + 200);
                await page.click(selector);
                return true;
            },
            humanType: async (selector, text, options = {}) => {
                await page.waitForSelector(selector, { visible: true, timeout: 10000 });
                await page.click(selector);
                await page.keyboard.down('Control');
                await page.keyboard.press('KeyA');
                await page.keyboard.up('Control');
                await page.keyboard.press('Backspace');
                const delay = options.delay || Math.random() * 50 + 50;
                await page.type(selector, text, { delay });
                return true;
            },
            humanScroll: async () => {
                await page.evaluate(() => {
                    window.scrollBy(0, Math.random() * 300 + 100);
                });
                await sleep(Math.random() * 1000 + 500);
            },
            randomMouseMovement: async () => {
                const x = Math.random() * 800 + 100;
                const y = Math.random() * 600 + 100;
                await page.mouse.move(x, y, { steps: 10 });
                await sleep(Math.random() * 500 + 200);
            },
            navigateWithRetry: async (url, maxRetries = 3) => {
                for (let attempt = 1; attempt <= maxRetries; attempt++) {
                    try {
                        await page.goto(url, { waitUntil: 'networkidle0', timeout: 30000 });
                        return true;
                    } catch (error) {
                        if (attempt === maxRetries) throw error;
                        await sleep(2000 * attempt);
                    }
                }
            }
        };

        return { browser, page, gologin };

    } catch (error) {
        console.error('‚ùå L·ªói kh·ªüi t·∫°o GoLogin:', error.message);
        console.log('üîÑ Th·ª≠ s·ª≠ d·ª•ng Puppeteer th√¥ng th∆∞·ªùng l√†m fallback...');

        try {
            // Fallback: S·ª≠ d·ª•ng Puppeteer th√¥ng th∆∞·ªùng
            const puppeteer = require('puppeteer');

            // T√¨m Chrome path tr·ª±c ti·∫øp
            const fs = require('fs');
            let chromePath = null;

            const possiblePaths = [
                'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
                'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe',
                'C:\\Users\\' + process.env.USERNAME + '\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe',
            ];

            for (const path of possiblePaths) {
                if (fs.existsSync(path)) {
                    chromePath = path;
                    break;
                }
            }

            if (!chromePath) {
                throw new Error('Kh√¥ng t√¨m th·∫•y Chrome executable');
            }

            console.log('üöÄ Kh·ªüi ƒë·ªông Puppeteer v·ªõi Chrome t·∫°i:', chromePath, '| headless =', IS_HEADLESS);

            browser = await puppeteer.launch({
                headless: IS_HEADLESS,
                executablePath: chromePath,
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--disable-gpu',
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor',
                    '--disable-blink-features=AutomationControlled',
                    '--disable-extensions',
                    '--no-default-browser-check'
                ],
                defaultViewport: null,
                ignoreDefaultArgs: ['--enable-automation'],
                ignoreHTTPSErrors: true
            });

            // L·∫•y page ƒë·∫ßu ti√™n ho·∫∑c t·∫°o m·ªõi
            const pages = await browser.pages();
            if (pages.length > 0) {
                page = pages[0];
            } else {
                page = await browser.newPage();
            }

            // Set viewport
            await page.setViewport({
                width: 1366,
                height: 768
            });

            console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o Puppeteer th√¥ng th∆∞·ªùng th√†nh c√¥ng (fallback)');

            return { browser, page };

        } catch (fallbackError) {
            console.error('‚ùå Fallback Puppeteer c≈©ng th·∫•t b·∫°i:', fallbackError.message);
            throw new Error(`C·∫£ GoLogin v√† Puppeteer ƒë·ªÅu th·∫•t b·∫°i. GoLogin: ${error.message}, Puppeteer: ${fallbackError.message}`);
        }
    }
}

async function getChromePath() {
    const fs = require('fs');

    // Danh s√°ch c√°c path c√≥ th·ªÉ c√≥ Chrome
    const paths = [
        'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
        'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe',
        'C:\\Users\\' + process.env.USERNAME + '\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe',
        'C:\\Users\\' + process.env.USERNAME + '\\AppData\\Local\\Chromium\\Application\\chrome.exe',
    ];

    // Th·ª≠ t√¨m Chrome trong c√°c path th√¥ng th∆∞·ªùng
    for (const path of paths) {
        if (fs.existsSync(path)) {
            console.log('‚úì T√¨m th·∫•y Chrome t·∫°i:', path);
            return path;
        }
    }

    // Th·ª≠ s·ª≠ d·ª•ng puppeteer executablePath
    try {
        const { executablePath } = require('puppeteer');
        const puppeteerPath = executablePath();
        if (fs.existsSync(puppeteerPath)) {
            console.log('‚úì S·ª≠ d·ª•ng Puppeteer Chrome t·∫°i:', puppeteerPath);
            return puppeteerPath;
        }
    } catch (error) {
        console.log('Puppeteer executablePath kh√¥ng ho·∫°t ƒë·ªông:', error.message);
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ download Chrome qua puppeteer
    try {
        console.log('üîÑ ƒêang download Chrome qua Puppeteer...');
        const puppeteer = require('puppeteer');
        const browserFetcher = puppeteer.createBrowserFetcher();
        const revisionInfo = await browserFetcher.download('1069273'); // Chrome stable version

        if (fs.existsSync(revisionInfo.executablePath)) {
            console.log('‚úì ƒê√£ download Chrome t·∫°i:', revisionInfo.executablePath);
            return revisionInfo.executablePath;
        }
    } catch (error) {
        console.log('Kh√¥ng th·ªÉ download Chrome:', error.message);
    }

    throw new Error('Kh√¥ng t√¨m th·∫•y Chrome executable. Vui l√≤ng c√†i ƒë·∫∑t Google Chrome.');
}

async function closeBrowser() {
    try {
        // L∆∞u session data tr∆∞·ªõc khi ƒë√≥ng
        if (page && browser && browser.isConnected()) {
            console.log('L∆∞u session data tr∆∞·ªõc khi ƒë√≥ng...');
            await saveSessionData(page);
        }

        if (browser && browser.isConnected()) {
            await browser.close();
        }
        if (gologin) {
            await gologin.stop();
        }
        console.log('‚úì ƒê√£ ƒë√≥ng GoLogin browser');
    } catch (error) {
        console.error('L·ªói khi ƒë√≥ng browser:', error.message);
    }
}

function getBrowser() {
    return browser;
}

function getPage() {
    return page;
}

function getGologin() {
    return gologin;
}

// H√†m HTTP request ƒë∆°n gi·∫£n
function makeHttpRequest(url, method = 'GET', data = null) {
    return new Promise((resolve, reject) => {
        const urlObj = new URL(url);
        const options = {
            hostname: urlObj.hostname,
            port: urlObj.port,
            path: urlObj.pathname,
            method: method,
            headers: {
                'Content-Type': 'application/json',
            }
        };

        const req = http.request(options, (res) => {
            let responseData = '';
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(responseData);
                    resolve(jsonData);
                } catch (error) {
                    resolve(responseData);
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (data) {
            req.write(JSON.stringify(data));
        }
        req.end();
    });
}

// H√†m sleep helper
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Global variable to store current browser instance
let currentGoLoginBrowser = null;

// Add missing functions for compatibility
async function humanClick(selector, options = {}) {
    if (currentGoLoginBrowser) {
        return await currentGoLoginBrowser.humanClick(selector, options);
    }
    throw new Error('GoLogin browser not initialized');
}

async function humanType(selector, text, options = {}) {
    if (currentGoLoginBrowser) {
        return await currentGoLoginBrowser.humanType(selector, text, options);
    }
    throw new Error('GoLogin browser not initialized');
}

async function humanScroll() {
    if (currentGoLoginBrowser) {
        return await currentGoLoginBrowser.humanScroll();
    }
    throw new Error('GoLogin browser not initialized');
}

async function randomMouseMovement() {
    if (currentGoLoginBrowser) {
        return await currentGoLoginBrowser.randomMouseMovement();
    }

    // Fallback cho Puppeteer th√¥ng th∆∞·ªùng
    if (currentBrowser && currentPage) {
        try {
            // T·∫°o random mouse movement ƒë∆°n gi·∫£n
            const viewport = await currentPage.viewport();
            const x = Math.random() * (viewport.width - 100) + 50;
            const y = Math.random() * (viewport.height - 100) + 50;

            await currentPage.mouse.move(x, y, { steps: 10 });
            await new Promise(resolve => setTimeout(resolve, 100));

            return true;
        } catch (error) {
            console.log('L·ªói random mouse movement:', error.message);
            return false;
        }
    }

    console.log('‚ö†Ô∏è Kh√¥ng c√≥ browser ƒë·ªÉ th·ª±c hi·ªán mouse movement');
    return false;
}

async function navigateWithRetry(url, maxRetries = 3) {
    if (currentGoLoginBrowser) {
        return await currentGoLoginBrowser.navigateWithRetry(url, maxRetries);
    }
    throw new Error('GoLogin browser not initialized');
}

module.exports = {
    initializeGologinBrowser,
    closeBrowser,
    getBrowser,
    getPage,
    getGologin,
    saveSessionData,
    restoreSessionData,
    loadCookiesOnly,
    clearSessionData,
    humanClick,
    humanType,
    humanScroll,
    randomMouseMovement,
    navigateWithRetry,
    sleep
};
