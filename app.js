require('dotenv').config();
const express = require('express');
// Using GoLogin browser for better stability
const { initializeGologinBrowser, closeBrowser, getBrowser, getPage, saveSessionData, loadCookiesOnly, humanClick, humanType, humanScroll, randomMouseMovement, navigateWithRetry, sleep } = require('./gologin-browser');
const SheetsManager = require('./sheets-manager');
const QueueManager = require('./queue-manager');
const AccountManager = require('./account-manager');

const app = express();
const port = process.env.PORT || 3000;


// API route config via .env
const API_ROUTE_1M = process.env.API_ROUTE_1M || '/addmail1m-sync';
const API_ROUTE_1Y = process.env.API_ROUTE_1Y || '/addmail1y-sync';
const API_ENABLE_1M = (process.env.API_ENABLE_1M || 'true').toLowerCase() !== 'false';
const API_ENABLE_1Y = (process.env.API_ENABLE_1Y || 'true').toLowerCase() !== 'false';
const API_KEY = process.env.API_KEY || process.env.API_TOKEN; // optional auth

function apiAuth(req, res, next) {
    if (!API_KEY) return next();
    const headerKey = req.headers['x-api-key'];
    const bearer = (req.headers['authorization'] || '').replace(/^Bearer\s+/i, '');
    const queryKey = req.query.api_key;
    const key = headerKey || bearer || queryKey;
    if (key && key === API_KEY) return next();
    return res.status(401).json({ success: false, message: 'Unauthorized' });
}

// Message templates (customizable via .env)
const SUCCESS_MSG_TEMPLATE = process.env.SUCCESS_MSG_TEMPLATE || 'ƒê√£ m·ªùi th√†nh c√¥ng {email}';
const FAIL_MSG_TEMPLATE = process.env.FAIL_MSG_TEMPLATE || 'M·ªùi {email} kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i sau. (G·ª£i √Ω: ki·ªÉm tra email c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c m·ªùi tr∆∞·ªõc ƒë√≥ ho·∫∑c x·∫£y ra l·ªói t·∫°m th·ªùi t·ª´ Canva)';
function formatMessage(tpl, data) {
    return (tpl || '').replace(/\{email\}/g, data.email || '').replace(/\{reason\}/g, data.reason || '');
}


let currentPage;
let currentBrowser;
let isInitializing = false; // Flag ƒë·ªÉ tr√°nh kh·ªüi t·∫°o nhi·ªÅu l·∫ßn

// Kh·ªüi t·∫°o managers
const sheetsManager = new SheetsManager();
const queueManager = new QueueManager();
const accountManager = new AccountManager();


// UI cache for headless (store selectors and coordinates)
const path = require('path');
const fs = require('fs');
const UI_CACHE_FILE = path.join(__dirname, 'user-data', 'ui-cache.json');
function ensureDirExists(dir) { try { if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true }); } catch {} }
function loadUiCache() {
    try {
        ensureDirExists(path.dirname(UI_CACHE_FILE));
        if (!fs.existsSync(UI_CACHE_FILE)) return {};
        const raw = fs.readFileSync(UI_CACHE_FILE, 'utf8');
        return JSON.parse(raw || '{}');
    } catch {
        return {};
    }
}
function saveUiCache(cache) {
    try {
        ensureDirExists(path.dirname(UI_CACHE_FILE));
        fs.writeFileSync(UI_CACHE_FILE, JSON.stringify(cache, null, 2), 'utf8');
    } catch {}
}
function getCachedRegion(key) { const cache = loadUiCache(); return cache[key]; }
function setCachedRegion(key, region) {
    const cache = loadUiCache();
    cache[key] = { ...(cache[key] || {}), ...region };
    saveUiCache(cache);
}
function setCachedSelector(key, selector) {
    if (!selector) return;
    const cache = loadUiCache();
    cache[key] = { ...(cache[key] || {}), selector };
    saveUiCache(cache);
}
async function tryClickCached(key, page) {
    const cached = getCachedRegion(key);
    if (!cached) return false;
    try {
        if (cached.selector) {
            const el = await page.$(cached.selector);
            if (el) {
                await el.click({ delay: 50 });
                console.log(`‚úì Click b·∫±ng selector cache (${key}): ${cached.selector}`);
                return true;
            }
        }
        const vp = await page.viewport();
        const scaleX = vp.width && cached.viewport?.width ? vp.width / cached.viewport.width : 1;
        const scaleY = vp.height && cached.viewport?.height ? vp.height / cached.viewport.height : 1;
        const cx = Math.round((cached.centerX || 0) * scaleX);
        const cy = Math.round((cached.centerY || 0) * scaleY);
        const clicked = await page.evaluate(({ x, y }) => {
            const el = document.elementFromPoint(x, y);
            if (!el) return false;
            const btn = el.closest('button') || (el.tagName === 'BUTTON' ? el : null);
            if (btn) { btn.click(); return true; }
            el.click();
            return true;
        }, { x: cx, y: cy });
        if (clicked) {
            console.log(`‚úì Click b·∫±ng v·ªã tr√≠ cache (${key}): (${cx}, ${cy})`);
            return true;
        }
    } catch (e) {
        console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ click b·∫±ng cache (${key}):`, e.message);
    }
    return false;
}
async function cacheElementCenter(page, key, selector) {
    try {
        const rect = await page.evaluate((sel) => {
            const el = document.querySelector(sel);
            if (!el) return null;
            const r = el.getBoundingClientRect();
            return { left: r.left, top: r.top, width: r.width, height: r.height };
        }, selector);
        if (rect && rect.width > 0 && rect.height > 0) {
            const vp = await page.viewport();
            const centerX = Math.round(rect.left + rect.width / 2);
            const centerY = Math.round(rect.top + rect.height / 2);
            setCachedRegion(key, { centerX, centerY, viewport: { width: vp.width, height: vp.height } });
            setCachedSelector(key, selector);
            console.log(`üß≠ L∆∞u cache (${key}): center=(${centerX},${centerY}), selector=${selector}`);
        }
    } catch {}
}
function clearCachedRegion(key) {
    const cache = loadUiCache();
    if (cache && cache[key]) { delete cache[key]; saveUiCache(cache); console.log(`üßπ ƒê√£ xo√° cache: ${key}`); }
}

// Map ƒë·ªÉ theo d√µi k·∫øt qu·∫£ task


const taskResults = new Map();

// Function ƒë·ªÉ ƒë·ª£i task ho√†n th√†nh
async function waitForTaskCompletion(taskId, timeout = 300000) { // 5 ph√∫t timeout
    return new Promise((resolve, reject) => {
        const startTime = Date.now();

        const checkInterval = setInterval(() => {
            // Ki·ªÉm tra timeout
            if (Date.now() - startTime > timeout) {
                clearInterval(checkInterval);
                reject(new Error(`Task ${taskId} timeout sau ${timeout/1000} gi√¢y`));
                return;
            }

            // Ki·ªÉm tra k·∫øt qu·∫£
            if (taskResults.has(taskId)) {
                const result = taskResults.get(taskId);
                taskResults.delete(taskId); // Cleanup
                clearInterval(checkInterval);
                resolve(result);
                return;
            }
        }, 1000); // Ki·ªÉm tra m·ªói gi√¢y
    });
}

// Event handlers cho queue manager
queueManager.on('executeTask', async (task, callback) => {
    const startTime = Date.now();

    try {
        console.log(`üéØ Th·ª±c thi task: ${task.email} (${task.duration})`);

        // ƒê·∫£m b·∫£o c√≥ t√†i kho·∫£n kh·∫£ d·ª•ng tr∆∞·ªõc khi thao t√°c UI
        const prevAccount = accountManager.getCurrentAccount();
        let currentAccountForTask;
        try {
            currentAccountForTask = await accountManager.ensureActiveAccount();
        } catch (e) {
            console.log('‚ùå Kh√¥ng c√≥ t√†i kho·∫£n On n√†o kh·∫£ d·ª•ng ƒë·ªÉ x·ª≠ l√Ω task hi·ªán t·∫°i');
            const result = {
                success: false,
                message: 'Kh√¥ng c√≥ t√†i kho·∫£n On n√†o kh·∫£ d·ª•ng',
                processingTime: `${Math.round((Date.now() - startTime) / 1000)}s`
            };
            if (task.id) taskResults.set(task.id, result);
            callback(result);
            return;
        }

        // N·∫øu t√†i kho·∫£n ƒë√£ b·ªã chuy·ªÉn kh√°c, c·∫ßn kh·ªüi t·∫°o l·∫°i tr√¨nh duy·ªát v√† ƒëƒÉng nh·∫≠p
        if (!prevAccount || parseInt(currentAccountForTask.id) !== parseInt(prevAccount.id)) {
            try {
                console.log(`üîÑ ƒê√£ chuy·ªÉn account ‚Üí re-login v·ªõi ID ${currentAccountForTask.id}`);
                await restartBrowserWithNewAccount(currentAccountForTask);
            } catch (reErr) {
                console.error('‚ùå L·ªói khi restart browser sau khi chuy·ªÉn account:', reErr.message);
                const result = {
                    success: false,
                    message: `Kh√¥ng th·ªÉ kh·ªüi t·∫°o l·∫°i tr√¨nh duy·ªát cho account m·ªõi: ${reErr.message}`,
                    processingTime: `${Math.round((Date.now() - startTime) / 1000)}s`
                };
                if (task.id) taskResults.set(task.id, result);
                callback(result);
                return;
            }
        }

        // Th·ª±c hi·ªán invite member
        const inviteResult = await inviteMemberToCanva(task.email);

        if (inviteResult.success) {
            // Ghi log v√†o Google Sheets
            let logResult = false;
            let isDuplicateEmail = false;

            console.log(`üìù ƒêang ghi log v√†o Google Sheets cho ${task.email}...`);

            try {
                // ƒê·∫£m b·∫£o c√≥ t√†i kho·∫£n Active kh·∫£ d·ª•ng tr∆∞·ªõc khi ghi log
                const currentAccount = await accountManager.ensureActiveAccount();

                if (task.duration === '1m') {
                    logResult = await sheetsManager.logOneMonth(task.email, currentAccount);
                } else if (task.duration === '1y') {
                    logResult = await sheetsManager.logOneYear(task.email, currentAccount);
                }

                if (logResult) {
                    console.log(`‚úÖ ƒê√£ ghi log th√†nh c√¥ng cho ${task.email}`);
                } else {
                    console.log(`‚ùå Kh√¥ng ghi ƒë∆∞·ª£c log cho ${task.email}`);
                }
            } catch (logError) {
                if (logError.message.includes('ƒë√£ ƒë∆∞·ª£c m·ªùi tr∆∞·ªõc ƒë√≥')) {
                    console.log(`‚ö†Ô∏è Email ${task.email} ƒë√£ ƒë∆∞·ª£c m·ªùi tr∆∞·ªõc ƒë√≥`);
                    isDuplicateEmail = true;

                    // Tr·∫£ v·ªÅ th·∫•t b·∫°i cho email tr√πng
                    const result = {
                        success: false,
                        message: `Email ${task.email} ƒë√£ ƒë∆∞·ª£c m·ªùi tr∆∞·ªõc ƒë√≥`,
                        isDuplicate: true,
                        processingTime: `${Math.round((Date.now() - startTime) / 1000)}s`
                    };

                    // L∆∞u k·∫øt qu·∫£ cho sync API
                    if (task.id) {
                        taskResults.set(task.id, result);
                    }

                    callback(result);
                    return;
                } else {
                    console.log(`‚ùå L·ªói ghi log cho ${task.email}:`, logError.message);
                }
            }

            // TƒÉng count cho t√†i kho·∫£n hi·ªán t·∫°i (ch·ªâ khi kh√¥ng ph·∫£i email tr√πng v√† m·ªùi th√†nh c√¥ng)
            if (!isDuplicateEmail && inviteResult.success) {
                // Log email v√†o c√°c c·ªôt tu·∫ßn t·ª± tr∆∞·ªõc
                await accountManager.logEmailToSequentialColumns(task.email, task.duration);

                const countIncremented = await accountManager.incrementSuccessCount();

                // Ki·ªÉm tra xem c√≥ c·∫ßn relogin kh√¥ng
                let reloginSuccess = true;
                if (countIncremented && countIncremented.needRelogin) {
                    console.log(`üîÑ C·∫ßn ƒë√≥ng tr√¨nh duy·ªát v√† kh·ªüi t·∫°o l·∫°i v·ªõi t√†i kho·∫£n: ${countIncremented.newAccount.username}`);

                    // ƒê√≥ng tr√¨nh duy·ªát hi·ªán t·∫°i v√† kh·ªüi t·∫°o l·∫°i
                    try {
                        console.log('üö™ ƒêang ƒë√≥ng tr√¨nh duy·ªát v√† kh·ªüi t·∫°o l·∫°i...');
                        await restartBrowserWithNewAccount(countIncremented.newAccount);
                        console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o l·∫°i tr√¨nh duy·ªát th√†nh c√¥ng');
                        reloginSuccess = true;
                    } catch (reloginError) {
                        console.error('‚ùå L·ªói khi kh·ªüi t·∫°o l·∫°i tr√¨nh duy·ªát:', reloginError.message);
                        reloginSuccess = false;

                        // N·∫øu kh·ªüi t·∫°o l·∫°i th·∫•t b·∫°i, c·∫ßn rollback count
                        console.log('üîÑ Rollback count do kh·ªüi t·∫°o l·∫°i th·∫•t b·∫°i...');
                        try {
                            await accountManager.rollbackCount();
                        } catch (rollbackError) {
                            console.error('‚ùå L·ªói rollback count:', rollbackError.message);
                        }
                    }
                }

                // Ch·ªâ t√≠nh th√†nh c√¥ng n·∫øu kh√¥ng c·∫ßn relogin ho·∫∑c relogin th√†nh c√¥ng
                const finalSuccess = inviteResult.success && reloginSuccess;

                const result = {
                    success: finalSuccess,
                    message: finalSuccess
                        ? formatMessage(SUCCESS_MSG_TEMPLATE, { email: task.email })
                        : formatMessage(FAIL_MSG_TEMPLATE, { email: task.email, reason: (inviteResult.message || (reloginSuccess ? 'M·ªùi th·∫•t b·∫°i' : 'Login l·∫°i th·∫•t b·∫°i')) }),
                    rawError: inviteResult.message || (reloginSuccess ? 'M·ªùi th·∫•t b·∫°i' : 'Login l·∫°i th·∫•t b·∫°i'),
                    loggedToSheets: logResult,
                    accountCountIncremented: countIncremented,
                    accountUsed: accountManager.getCurrentAccount()?.username || 'unknown',
                    processingTime: `${Math.round((Date.now() - startTime) / 1000)}s`,
                    accountSwitched: countIncremented?.needRelogin || false
                };

                // L∆∞u k·∫øt qu·∫£ cho sync API
                if (task.id) {
                    taskResults.set(task.id, result);
                }

                callback(result);
            }
        } else {
            const result = {
                success: false,
                message: formatMessage(FAIL_MSG_TEMPLATE, { email: task.email, reason: inviteResult.message }),
                rawError: inviteResult.message,
                processingTime: `${Math.round((Date.now() - startTime) / 1000)}s`
            };

            // L∆∞u k·∫øt qu·∫£ cho sync API
            if (task.id) {
                taskResults.set(task.id, result);
            }

            callback(result);
        }

    } catch (error) {
        callback({
            success: false,
            message: error.message
        });
    }
});

queueManager.on('taskCompleted', (task, result) => {
    console.log(`‚úÖ Task ho√†n th√†nh: ${task.email} - ${result.message}`);
});

queueManager.on('taskFailed', (task, error) => {
    console.log(`‚ùå Task th·∫•t b·∫°i: ${task.email} - ${error.message}`);
    // C·∫≠p nh·∫≠t status trong Google Sheets n·∫øu c·∫ßn
    sheetsManager.updateStatus(task.email, task.duration, 'Failed').catch(console.error);
});

queueManager.on('queueCompleted', (stats) => {
    console.log('üéâ H√†ng ƒë·ª£i ƒë√£ ho√†n th√†nh!');
    console.log(`üìä Th·ªëng k√™: ${stats.completed} th√†nh c√¥ng, ${stats.failed} th·∫•t b·∫°i`);
});

// sleep function ƒë√£ ƒë∆∞·ª£c import t·ª´ puppeteer-browser

/**
 * H√†m g√µ ch·∫≠m nh∆∞ ng∆∞·ªùi th·∫≠t
 * @param {Page} page - Puppeteer page
 * @param {string} selector - CSS selector
 * @param {string} text - Text to type
 */
async function humanLikeType(page, selector, text) {
    await page.click(selector);
    await page.keyboard.down('Control');
    await page.keyboard.press('KeyA');
    await page.keyboard.up('Control');
    await sleep(100);

    // G√µ t·ª´ng k√Ω t·ª± v·ªõi t·ªëc ƒë·ªô ng·∫´u nhi√™n
    for (const char of text) {
        await page.keyboard.type(char);
        // T·ªëc ƒë·ªô g√µ ng·∫´u nhi√™n t·ª´ 50-150ms gi·ªØa c√°c k√Ω t·ª±
        const delay = Math.random() * 100 + 50;
        await sleep(delay);
    }
}

/**
 * H√†m m·ªùi member v√†o Canva (d√πng cho queue)
 * @param {string} email - Email to invite
 */
async function inviteMemberToCanva(email) {
    const maxAttempts = 3; // t·ªïng 3 l·∫ßn (1 l·∫ßn + 2 l·∫ßn th·ª≠ l·∫°i)
    let lastErrorMsg = '';

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        try {
            if (!currentPage || !currentBrowser) {
                throw new Error('Tr√¨nh duy·ªát ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
            }

            console.log(`üéØ B·∫Øt ƒë·∫ßu m·ªùi: ${email} (l·∫ßn ${attempt}/${maxAttempts})`);

            // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang qu·∫£n l√Ω th√†nh vi√™n m·ªói l·∫ßn th·ª≠
            console.log('üìç ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang qu·∫£n l√Ω th√†nh vi√™n...');
            await currentPage.goto('https://www.canva.com/settings/people', { waitUntil: 'networkidle0', timeout: 30000 });
            await sleep(1500);

            // T√¨m v√† click n√∫t m·ªùi th√†nh vi√™n
            console.log('üîç T√¨m v√† click n√∫t m·ªùi th√†nh vi√™n...');
            const inviteClicked = await clickInviteButton(currentPage);
            if (!inviteClicked) {
                throw new Error('Kh√¥ng th·ªÉ t√¨m th·∫•y n√∫t m·ªùi th√†nh vi√™n');
            }
            await sleep(600);

            // Click "M·ªùi qua email"
            console.log('üìß Click "M·ªùi qua email"...');
            const emailTabClicked = await clickInviteByEmailButton(currentPage);
            if (!emailTabClicked) {
                throw new Error('Kh√¥ng th·ªÉ t√¨m th·∫•y tab "M·ªùi qua email"');
            }
            await sleep(600);

            // Nh·∫≠p email v·ªõi t·ªëc ƒë·ªô nh∆∞ ng∆∞·ªùi th·∫≠t
            console.log(`‚å®Ô∏è Nh·∫≠p email v·ªõi t·ªëc ƒë·ªô ng∆∞·ªùi th·∫≠t: ${email}`);
            const emailEntered = await enterEmailHumanLike(currentPage, email);
            if (!emailEntered) {
                throw new Error('Kh√¥ng th·ªÉ nh·∫≠p email v√†o form');
            }
            await sleep(600);

            // Click n√∫t "G·ª≠i l·ªùi m·ªùi"
            console.log('üì§ Click n√∫t "G·ª≠i l·ªùi m·ªùi"...');
            const inviteSent = await clickSendInviteButton(currentPage);
            if (!inviteSent) {
                throw new Error('Kh√¥ng th·ªÉ g·ª≠i l·ªùi m·ªùi');
            }
            await sleep(1500);

            // Ki·ªÉm tra error message t·ª´ Canva
            console.log('üîç Ki·ªÉm tra error message t·ª´ Canva...');
            const hasError = await checkCanvaErrorMessage(currentPage);
            if (hasError) {
                throw new Error('Canva ƒë√£ x·∫£y ra l·ªói v√† kh√¥ng th·ªÉ g·ª≠i th∆∞ m·ªùi. Vui l√≤ng th·ª≠ l·∫°i sau.');
            }

            console.log(`‚úÖ ƒê√£ m·ªùi th√†nh c√¥ng: ${email}`);
            return { success: true, message: `ƒê√£ g·ª≠i l·ªùi m·ªùi th√†nh c√¥ng ƒë·∫øn ${email}` };
        } catch (error) {
            lastErrorMsg = error?.message || String(error);
            console.error(`‚ùå L·ªói khi m·ªùi ${email} (l·∫ßn ${attempt}/${maxAttempts}):`, lastErrorMsg);

            if (attempt < maxAttempts) {
                // H·ªìi ph·ª•c nh·∫π tr∆∞·ªõc khi th·ª≠ l·∫°i: refresh trang v√† ch·ªù ng·∫´u nhi√™n
                try {
                    await currentPage.reload({ waitUntil: 'networkidle0', timeout: 30000 });
                } catch {}
                const backoff = 1000 + Math.floor(Math.random() * 1000) + attempt * 500;
                console.log(`‚è≥ Ch·ªù ${backoff}ms tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
                await sleep(backoff);
                continue;
            } else {
                // H·∫øt s·ªë l·∫ßn th·ª≠
                return { success: false, message: lastErrorMsg };
            }
        }
    }

    // Ph√≤ng h·ªù (kh√¥ng bao gi·ªù t·ªõi ƒë√¢y)
    return { success: false, message: lastErrorMsg || 'Kh√¥ng x√°c ƒë·ªãnh' };
}

/**
 * H√†m nh·∫≠p email v·ªõi t·ªëc ƒë·ªô nh∆∞ ng∆∞·ªùi th·∫≠t
 * @param {Page} page - Puppeteer page
 * @param {string} email - Email to enter
 */
async function enterEmailHumanLike(page, email) {
    console.log(`‚å®Ô∏è T√¨m input field ƒë·ªÉ nh·∫≠p email: ${email}`);

    const emailInputSelectors = [
        'input[type="email"]',
        'input[placeholder*="email"]',
        'input[placeholder*="Email"]',
        'input[name="email"]',
        'input[aria-label*="email"]',
        'textarea[placeholder*="email"]',
        'input[data-testid*="email"]'
    ];

    for (const selector of emailInputSelectors) {
        try {
            await page.waitForSelector(selector, { visible: true, timeout: 3000 });

            // Nh·∫≠p email v·ªõi t·ªëc ƒë·ªô nh∆∞ ng∆∞·ªùi th·∫≠t
            await page.click(selector);
            await page.keyboard.down('Control');
            await page.keyboard.press('KeyA');
            await page.keyboard.up('Control');
            await sleep(100);

            // G√µ t·ª´ng k√Ω t·ª± v·ªõi t·ªëc ƒë·ªô ng·∫´u nhi√™n
            for (const char of email) {
                await page.keyboard.type(char);
                // T·ªëc ƒë·ªô g√µ ng·∫´u nhi√™n t·ª´ 80-200ms gi·ªØa c√°c k√Ω t·ª± (nh∆∞ ng∆∞·ªùi th·∫≠t)
                const delay = Math.random() * 120 + 80;
                await sleep(delay);
            }

            console.log('‚úÖ ƒê√£ nh·∫≠p email v·ªõi t·ªëc ƒë·ªô ng∆∞·ªùi th·∫≠t');
            return true;
        } catch (error) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y input v·ªõi selector: ${selector}`);
        }
    }

    return false;
}

/**
 * CRITICAL FIX: Ki·ªÉm tra error message t·ª´ Canva
 * @param {import('puppeteer').Page} page - Th·ªÉ hi·ªán c·ªßa trang Puppeteer
 * @returns {Promise<boolean>} True n·∫øu c√≥ error message
 */
async function checkCanvaErrorMessage(page) {
    try {
        console.log('üîç ƒêang ki·ªÉm tra error message t·ª´ Canva...');

        // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ error message hi·ªÉn th·ªã
        await sleep(1000);

        // Ki·ªÉm tra error message c·ª• th·ªÉ t·ª´ Canva
        const hasError = await page.evaluate(() => {
            // T√¨m error message v·ªõi text c·ª• th·ªÉ
            const errorTexts = [
                'Canva ƒë√£ x·∫£y ra l·ªói v√† kh√¥ng th·ªÉ g·ª≠i th∆∞ m·ªùi c·ªßa b·∫°n',
                'Canva ƒë√£ x·∫£y ra l·ªói v√† kh√¥ng th·ªÉ g·ª≠i th∆∞ m·ªùi',
                'kh√¥ng th·ªÉ g·ª≠i th∆∞ m·ªùi',
                'x·∫£y ra l·ªói',
                'Something went wrong',
                'Unable to send invitation',
                'Error sending invitation'
            ];

            // T√¨m trong t·∫•t c·∫£ text content
            const allText = document.body.innerText || document.body.textContent || '';

            for (const errorText of errorTexts) {
                if (allText.toLowerCase().includes(errorText.toLowerCase())) {
                    console.log('Found error text:', errorText);
                    return true;
                }
            }

            // T√¨m error alert/notification elements
            const errorSelectors = [
                '[role="alert"]',
                '.error',
                '.alert',
                '.notification',
                '.toast',
                '.message',
                '[class*="error"]',
                '[class*="alert"]',
                '[class*="notification"]'
            ];

            for (const selector of errorSelectors) {
                const elements = document.querySelectorAll(selector);
                for (const element of elements) {
                    const text = element.innerText || element.textContent || '';
                    if (text && (text.includes('l·ªói') || text.includes('error') || text.includes('th·∫•t b·∫°i'))) {
                        console.log('Found error element:', text);
                        return true;
                    }
                }
            }

            return false;
        });

        if (hasError) {
            console.log('‚ùå Ph√°t hi·ªán error message t·ª´ Canva');
            return true;
        } else {
            console.log('‚úÖ Kh√¥ng c√≥ error message');
            return false;
        }

    } catch (error) {
        console.log('‚ö†Ô∏è L·ªói khi ki·ªÉm tra error message:', error.message);
        return false; // N·∫øu kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c, coi nh∆∞ kh√¥ng c√≥ l·ªói
    }
}

/**
 * Click v√†o n√∫t "M·ªùi th√†nh vi√™n" d·ª±a tr√™n HTML c·ª• th·ªÉ
 * @param {import('puppeteer').Page} page - Th·ªÉ hi·ªán c·ªßa trang Puppeteer
 * @returns {Promise<boolean>} True n·∫øu click th√†nh c√¥ng
 */
async function clickInviteButton(page) {
    console.log('T√¨m n√∫t "M·ªùi th√†nh vi√™n" v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p...');

    try {
        // ∆Øu ti√™n d√πng cache (selector/to·∫° ƒë·ªô)
        if (await tryClickCached('invite_button', page)) return true;

        // Ph∆∞∆°ng ph√°p 1: T√¨m theo text content
        const inviteTexts = ['M·ªùi th√†nh vi√™n', 'Invite members', 'Add members', 'Invite people'];

        for (const text of inviteTexts) {
            const found = await page.evaluate((searchText) => {
                // T√¨m t·∫•t c·∫£ c√°c element c√≥ text ph√π h·ª£p
                const elements = Array.from(document.querySelectorAll('*')).filter(el => {
                    return el.textContent && el.textContent.trim() === searchText;
                });

                for (const element of elements) {
                    // T√¨m button g·∫ßn nh·∫•t
                    const button = element.closest('button') ||
                                 (element.tagName === 'BUTTON' ? element : null) ||
                                 element.querySelector('button');

                    if (button && button.offsetParent !== null) { // Visible check
                        button.setAttribute('data-invite-button', 'found');
                        return true;
                    }
                }
                return false;
            }, text);

            if (found) {
                await page.click('[data-invite-button="found"]', { delay: 100 });
                await cacheElementCenter(page, 'invite_button', '[data-invite-button="found"]');
                console.log(`‚úì ƒê√£ click n√∫t m·ªùi v·ªõi text: "${text}"`);
                return true;
            }
        }

        // Ph∆∞∆°ng ph√°p 2: T√¨m theo c√°c selector ph·ªï bi·∫øn
        const inviteSelectors = [
            'button[aria-label*="invite"]',
            'button[aria-label*="Invite"]',
            'button[aria-label*="m·ªùi"]',
            'button[data-testid*="invite"]',
            // ':has-text' kh√¥ng ph·∫£i c·ªßa Puppeteer, gi·ªØ l·∫°i cho m·ªôt s·ªë m√¥i tr∆∞·ªùng h·ªó tr·ª£
            'button:has-text("M·ªùi th√†nh vi√™n")',
            'button:has-text("Invite members")',
            '[role="button"]:has-text("M·ªùi th√†nh vi√™n")',
            '.invite-button',
            '.add-member-button'
        ];

        for (const selector of inviteSelectors) {
            try {
                await page.waitForSelector(selector, { timeout: 2000 });
                await page.click(selector, { delay: 100 });
                await cacheElementCenter(page, 'invite_button', selector);
                console.log(`‚úì ƒê√£ click n√∫t m·ªùi v·ªõi selector: ${selector}`);
                return true;
            } catch (error) {
                console.log(`Kh√¥ng t√¨m th·∫•y selector: ${selector}`);
            }
        }

        console.log('‚úó Kh√¥ng t√¨m th·∫•y n√∫t "M·ªùi th√†nh vi√™n" v·ªõi b·∫•t k·ª≥ ph∆∞∆°ng ph√°p n√†o');
        return false;

    } catch (error) {
        console.error('L·ªói khi click n√∫t m·ªùi:', error.message);
        return false;
    }
}

/**
 * Click v√†o n√∫t "M·ªùi qua email" d·ª±a tr√™n HTML c·ª• th·ªÉ
 * @param {import('puppeteer').Page} page - Th·ªÉ hi·ªán c·ªßa trang Puppeteer
 * @returns {Promise<boolean>} True n·∫øu click th√†nh c√¥ng
 */
async function clickInviteByEmailButton(page) {
    console.log('T√¨m n√∫t "M·ªùi qua email" v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p...');

    try {
        // ∆Øu ti√™n cache
        if (await tryClickCached('invite_by_email', page)) return true;

        // Ph∆∞∆°ng ph√°p 1: T√¨m theo text content
        const emailTexts = ['M·ªùi qua email', 'Invite via email', 'Email invite', 'By email'];

        for (const text of emailTexts) {
            const found = await page.evaluate((searchText) => {
                // T√¨m t·∫•t c·∫£ c√°c element c√≥ text ph√π h·ª£p
                const elements = Array.from(document.querySelectorAll('*')).filter(el => {
                    return el.textContent && el.textContent.trim() === searchText;
                });

                for (const element of elements) {
                    // T√¨m button ho·∫∑c tab g·∫ßn nh·∫•t
                    const button = element.closest('button') ||
                                 element.closest('[role="tab"]') ||
                                 (element.tagName === 'BUTTON' ? element : null);

                    if (button && button.offsetParent !== null) { // Visible check
                        button.setAttribute('data-email-button', 'found');
                        return true;
                    }
                }
                return false;
            }, text);

            if (found) {
                await page.click('[data-email-button="found"]', { delay: 100 });
                await cacheElementCenter(page, 'invite_by_email', '[data-email-button="found"]');
                console.log(`‚úì ƒê√£ click n√∫t email v·ªõi text: "${text}"`);
                return true;
            }
        }

        // Ph∆∞∆°ng ph√°p 2: T√¨m theo c√°c selector ph·ªï bi·∫øn
        const emailSelectors = [
            'button[role="tab"]:has-text("email")',
            'button[role="tab"]:has-text("Email")',
            'button[role="tab"]:has-text("M·ªùi qua email")',
            '[role="tab"][aria-label*="email"]',
            'button[data-testid*="email"]',
            '.email-tab',
            '.invite-email-tab'
        ];

        for (const selector of emailSelectors) {
            try {
                await page.waitForSelector(selector, { timeout: 2000 });
                await page.click(selector, { delay: 100 });
                await cacheElementCenter(page, 'invite_by_email', selector);
                console.log(`‚úì ƒê√£ click tab email v·ªõi selector: ${selector}`);
                return true;
            } catch (error) {
                console.log(`Kh√¥ng t√¨m th·∫•y selector: ${selector}`);
            }
        }

        console.log('‚úó Kh√¥ng t√¨m th·∫•y n√∫t "M·ªùi qua email" v·ªõi b·∫•t k·ª≥ ph∆∞∆°ng ph√°p n√†o');
        return false;

    } catch (error) {
        console.error('L·ªói khi click n√∫t m·ªùi qua email:', error.message);
        return false;
    }
}

/**
 * Click v√†o n√∫t "G·ª≠i l·ªùi m·ªùi" d·ª±a tr√™n HTML c·ª• th·ªÉ
 * @param {import('puppeteer').Page} page - Th·ªÉ hi·ªán c·ªßa trang Puppeteer
 * @returns {Promise<boolean>} True n·∫øu click th√†nh c√¥ng
 */
async function clickSendInviteButton(page) {
    console.log('T√¨m n√∫t "G·ª≠i l·ªùi m·ªùi" v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p...');

    try {
        // ∆Øu ti√™n cache
        if (await tryClickCached('send_invite', page)) return true;

        // Ph∆∞∆°ng ph√°p 1: T√¨m theo text content
        const sendTexts = ['G·ª≠i l·ªùi m·ªùi', 'Send invite', 'Send invitation', 'Send', 'Invite'];

        for (const text of sendTexts) {
            const found = await page.evaluate((searchText) => {
                // T√¨m t·∫•t c·∫£ c√°c element c√≥ text ph√π h·ª£p
                const elements = Array.from(document.querySelectorAll('*')).filter(el => {
                    return el.textContent && el.textContent.trim() === searchText;
                });

                for (const element of elements) {
                    // T√¨m button g·∫ßn nh·∫•t
                    const button = element.closest('button') ||
                                 (element.tagName === 'BUTTON' ? element : null);

                    if (button && button.offsetParent !== null) { // Visible check
                        button.setAttribute('data-send-button', 'found');
                        return true;
                    }
                }
                return false;
            }, text);

            if (found) {
                await page.click('[data-send-button="found"]', { delay: 100 });
                await cacheElementCenter(page, 'send_invite', '[data-send-button="found"]');
                console.log(`‚úì ƒê√£ click n√∫t g·ª≠i v·ªõi text: "${text}"`);
                return true;
            }
        }

        // Ph∆∞∆°ng ph√°p 2: T√¨m theo c√°c selector ph·ªï bi·∫øn
        const sendSelectors = [
            'button[type="submit"]',
            'button[aria-label*="send"]',
            'button[aria-label*="Send"]',
            'button[aria-label*="g·ª≠i"]',
            'button[data-testid*="send"]',
            'button[data-testid*="invite"]',
            '.send-button',
            '.invite-send-button',
            '.submit-button'
        ];

        for (const selector of sendSelectors) {
            try {
                await page.waitForSelector(selector, { timeout: 2000 });
                await page.click(selector, { delay: 100 });
                await cacheElementCenter(page, 'send_invite', selector);
                console.log(`‚úì ƒê√£ click n√∫t g·ª≠i v·ªõi selector: ${selector}`);
                return true;
            } catch (error) {
                console.log(`Kh√¥ng t√¨m th·∫•y selector: ${selector}`);
            }
        }

        console.log('‚úó Kh√¥ng t√¨m th·∫•y n√∫t "G·ª≠i l·ªùi m·ªùi" v·ªõi b·∫•t k·ª≥ ph∆∞∆°ng ph√°p n√†o');
        return false;

    } catch (error) {
        console.error('L·ªói khi click n√∫t g·ª≠i l·ªùi m·ªùi:', error.message);
        return false;
    }
}





/**
 * T√¨m v√† nh·∫≠p email v√†o input field nh∆∞ ng∆∞·ªùi th·∫≠t
 * @param {import('puppeteer').Page} page - Th·ªÉ hi·ªán c·ªßa trang Puppeteer
 * @param {string} email - Email c·∫ßn nh·∫≠p
 * @returns {Promise<boolean>} True n·∫øu nh·∫≠p th√†nh c√¥ng
 */
async function typeEmailInInput(page, email) {
    console.log(`T√¨m input field ƒë·ªÉ nh·∫≠p email: ${email}`);

    try {
        // T√¨m input field b·∫±ng nhi·ªÅu c√°ch kh√°c nhau
        const inputSelector = await page.evaluate(() => {
            // Th·ª≠ t√¨m input c√≥ th·ªÉ nh·∫≠p email
            const inputs = document.querySelectorAll('input[type="text"], input[type="email"], input:not([type])');
            for (const input of inputs) {
                // Ki·ªÉm tra n·∫øu input visible v√† c√≥ th·ªÉ nh·∫≠p
                if (input.offsetParent !== null && !input.disabled && !input.readOnly) {
                    // Ki·ªÉm tra placeholder ho·∫∑c attributes li√™n quan ƒë·∫øn email
                    const placeholder = input.placeholder?.toLowerCase() || '';
                    const autocomplete = input.autocomplete?.toLowerCase() || '';
                    const inputmode = input.inputMode?.toLowerCase() || '';

                    if (placeholder.includes('email') ||
                        autocomplete.includes('email') ||
                        inputmode.includes('email') ||
                        autocomplete.includes('team-member')) {
                        input.setAttribute('data-email-input', 'found');
                        return '[data-email-input="found"]';
                    }
                }
            }
            return null;
        });

        if (inputSelector) {
            // Click v√†o input ƒë·ªÉ focus
            await page.click(inputSelector);
            await sleep(200);

            // X√≥a n·ªôi dung c≈© n·∫øu c√≥
            await page.keyboard.down('Control');
            await page.keyboard.press('KeyA');
            await page.keyboard.up('Control');
            await sleep(100);

            // Nh·∫≠p email
            await page.keyboard.type(email);
            await sleep(300);

            // Trigger events ƒë·ªÉ ƒë·∫£m b·∫£o form nh·∫≠n di·ªán input
            await page.evaluate((selector) => {
                const input = document.querySelector(selector);
                if (input) {
                    input.dispatchEvent(new Event('input', { bubbles: true }));
                    input.dispatchEvent(new Event('change', { bubbles: true }));
                    input.dispatchEvent(new Event('blur', { bubbles: true }));
                }
            }, inputSelector);

            console.log('‚úì ƒê√£ nh·∫≠p email th√†nh c√¥ng');
            return true;
        } else {
            console.log('‚úó Kh√¥ng t√¨m th·∫•y input field ph√π h·ª£p');
            return false;
        }
    } catch (error) {
        console.error('L·ªói khi nh·∫≠p email:', error.message);
        return false;
    }
}

/**
 * T√¨m v√† click v√†o m·ªôt ph·∫ßn t·ª≠ ch·ª©a vƒÉn b·∫£n c·ª• th·ªÉ.
 * H√†m n√†y d√πng cho c√°c n√∫t c√≥ vƒÉn b·∫£n r√µ r√†ng m√† selector kh√°c kh√≥ b·∫Øt.
 * @param {import('puppeteer').Page} page - Th·ªÉ hi·ªán c·ªßa trang Puppeteer.
 * @param {string} textToClick - VƒÉn b·∫£n c·∫ßn t√¨m v√† click.
 * @param {string} [parentSelector='*'] - Selector CSS ho·∫∑c XPath c·ªßa ph·∫ßn t·ª≠ cha ƒë·ªÉ gi·ªõi h·∫°n ph·∫°m vi t√¨m ki·∫øm (m·∫∑c ƒë·ªãnh l√† to√†n b·ªô trang).
 * @param {number} [timeout=30000] - Th·ªùi gian ch·ªù t·ªëi ƒëa cho ph·∫ßn t·ª≠ xu·∫•t hi·ªán.
 * @returns {Promise<boolean>} True n·∫øu t√¨m th·∫•y v√† click th√†nh c√¥ng, ng∆∞·ª£c l·∫°i l√† false.
 */
async function clickElementByText(page, textToClick, parentSelector = '*', timeout = 30000) {
    console.log(`ƒêang t√¨m v√† click vƒÉn b·∫£n: "${textToClick}" trong ph·∫°m vi: "${parentSelector}"`);

    try {
        // S·ª≠ d·ª•ng page.evaluate ƒë·ªÉ t√¨m element ch·ª©a text
        const elementFound = await page.evaluate((text, parent) => {
            const elements = document.querySelectorAll(`${parent} *`);
            for (let element of elements) {
                if (element.textContent && element.textContent.toLowerCase().includes(text.toLowerCase())) {
                    // T·∫°o m·ªôt unique identifier cho element
                    element.setAttribute('data-temp-id', 'temp-click-target');
                    return true;
                }
            }
            return false;
        }, textToClick, parentSelector);

        if (elementFound) {
            // Ch·ªù element xu·∫•t hi·ªán v√† click
            await page.waitForSelector('[data-temp-id="temp-click-target"]', { visible: true, timeout: timeout });
            console.log(`ƒê√£ t√¨m th·∫•y vƒÉn b·∫£n "${textToClick}". ƒêang click...`);
            await page.click('[data-temp-id="temp-click-target"]', { delay: 50 });

            // X√≥a attribute t·∫°m th·ªùi
            await page.evaluate(() => {
                const element = document.querySelector('[data-temp-id="temp-click-target"]');
                if (element) {
                    element.removeAttribute('data-temp-id');
                }
            });

            return true;
        } else {
            console.error(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ ch·ª©a vƒÉn b·∫£n "${textToClick}".`);
            return false;
        }
    } catch (error) {
        console.error(`L·ªói khi t√¨m ho·∫∑c click vƒÉn b·∫£n "${textToClick}":`, error);
        return false;
    }
}


// H√†m ƒëƒÉng nh·∫≠p v√†o Canva v·ªõi t√†i kho·∫£n c·ª• th·ªÉ
async function loginToCanva(account) {
    try {
        console.log(`üîë B·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n: ${account.username}`);

        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang login
        await currentPage.goto('https://www.canva.com/login/', {
            waitUntil: 'networkidle0',
            timeout: 30000
        });

        await sleep(3000);

        // T√¨m v√† click n√∫t "Continue with email"
        console.log('T√¨m n√∫t "Continue with email"...');
        const continueEmailClicked = await clickElementByText(currentPage, 'Continue with email', 'button', 10000);

        if (!continueEmailClicked) {
            // Th·ª≠ c√°c text kh√°c
            const alternativeTexts = ['Ti·∫øp t·ª•c v·ªõi email', 'Email', 'Log in with email'];
            for (const text of alternativeTexts) {
                const clicked = await clickElementByText(currentPage, text, 'button', 5000);
                if (clicked) {
                    console.log(`‚úì ƒê√£ click "${text}"`);
                    break;
                }
            }
        }

        await sleep(3000);

        // T√¨m tr∆∞·ªùng email
        console.log('T√¨m tr∆∞·ªùng email...');
        const emailSelector = 'input[type="email"], input[name="email"], input[placeholder*="email"]';
        await currentPage.waitForSelector(emailSelector, { visible: true, timeout: 10000 });

        // Nh·∫≠p email
        console.log(`Nh·∫≠p email: ${account.username}`);
        await currentPage.type(emailSelector, account.username, { delay: 50 });
        await sleep(500);

        // Nh·∫•n Enter
        await currentPage.keyboard.press('Enter');
        await sleep(5000);

        // T√¨m tr∆∞·ªùng password
        console.log('T√¨m tr∆∞·ªùng password...');
        const passwordSelector = 'input[type="password"], input[name="password"]';
        await currentPage.waitForSelector(passwordSelector, { visible: true, timeout: 15000 });

        // Nh·∫≠p password
        console.log('Nh·∫≠p password...');
        await currentPage.type(passwordSelector, account.password, { delay: 50 });
        await sleep(500);

        // Nh·∫•n Enter ƒë·ªÉ ƒëƒÉng nh·∫≠p
        await currentPage.keyboard.press('Enter');

        // Ch·ªù ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        console.log('Ch·ªù ƒëƒÉng nh·∫≠p ho√†n t·∫•t...');
        await sleep(10000);

        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang qu·∫£n l√Ω th√†nh vi√™n
        console.log('ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang qu·∫£n l√Ω th√†nh vi√™n...');
        await currentPage.goto('https://www.canva.com/settings/people', {
            waitUntil: 'networkidle0',
            timeout: 30000
        });

        await sleep(3000);

        // Ki·ªÉm tra xem c√≥ n√∫t "M·ªùi th√†nh vi√™n" kh√¥ng
        const inviteButtonFound = await clickElementByText(currentPage, 'M·ªùi th√†nh vi√™n', '*', 5000);
        if (inviteButtonFound) {
            // ƒê√≥ng popup n·∫øu m·ªü
            await currentPage.keyboard.press('Escape');
            await sleep(1000);
            console.log('‚úì ƒê√£ t√¨m th·∫•y n√∫t "M·ªùi th√†nh vi√™n" - ƒëƒÉng nh·∫≠p th√†nh c√¥ng');
        }

        // L∆∞u session data
        await saveSessionData(currentPage);

        return true;

    } catch (error) {
        console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', error.message);
        throw error;
    }
}

// H√†m ƒë√≥ng tr√¨nh duy·ªát v√† kh·ªüi t·∫°o l·∫°i v·ªõi t√†i kho·∫£n m·ªõi
async function restartBrowserWithNewAccount(newAccount) {
    try {
        console.log(`üîÑ ƒêang ƒë√≥ng tr√¨nh duy·ªát hi·ªán t·∫°i...`);

        // B∆∞·ªõc 1: ƒê√≥ng tr√¨nh duy·ªát hi·ªán t·∫°i ho√†n to√†n
        if (currentBrowser) {
            try {
                await currentBrowser.close();
                console.log('‚úì ƒê√£ ƒë√≥ng tr√¨nh duy·ªát');
            } catch (closeError) {
                console.log('‚ö†Ô∏è L·ªói khi ƒë√≥ng tr√¨nh duy·ªát:', closeError.message);
            }
        }

        // B∆∞·ªõc 2: Reset c√°c bi·∫øn global
        currentBrowser = null;
        currentPage = null;

        // B∆∞·ªõc 3: ƒê√≥ng GoLogin browser n·∫øu c√≥
        const { closeBrowser } = require('./gologin-browser');
        try {
            await closeBrowser();
            console.log('‚úì ƒê√£ ƒë√≥ng GoLogin browser');
        } catch (gologinError) {
            console.log('‚ö†Ô∏è L·ªói khi ƒë√≥ng GoLogin:', gologinError.message);
        }

        // B∆∞·ªõc 4: Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ ƒë√£ ƒë√≥ng
        await sleep(3000);

        // B∆∞·ªõc 5: Reset flag ƒë·ªÉ cho ph√©p kh·ªüi t·∫°o l·∫°i
        isInitializing = false;

        // B∆∞·ªõc 6: Kh·ªüi t·∫°o l·∫°i tr√¨nh duy·ªát v·ªõi t√†i kho·∫£n m·ªõi
        console.log(`üöÄ ƒêang kh·ªüi t·∫°o l·∫°i tr√¨nh duy·ªát v·ªõi t√†i kho·∫£n: ${newAccount.username}`);

        // G·ªçi l·∫°i setupBrowserAndLogin ƒë·ªÉ kh·ªüi t·∫°o ho√†n to√†n t·ª´ ƒë·∫ßu (b·ªè qua check isInitializing)
        await setupBrowserAndLogin(true);

        console.log(`‚úÖ ƒê√£ kh·ªüi t·∫°o l·∫°i tr√¨nh duy·ªát th√†nh c√¥ng v·ªõi t√†i kho·∫£n: ${newAccount.username}`);

        return true;

    } catch (error) {
        console.error('‚ùå L·ªói kh·ªüi t·∫°o l·∫°i tr√¨nh duy·ªát:', error.message);
        throw error;
    }
}

async function setupBrowserAndLogin(forceRestart = false) {
    try {
        // Ki·ªÉm tra xem c√≥ ƒëang kh·ªüi t·∫°o kh√¥ng (tr·ª´ khi l√† restart)
        if (isInitializing && !forceRestart) {
            console.log('‚è≥ H·ªá th·ªëng ƒëang kh·ªüi t·∫°o, ch·ªù ho√†n t·∫•t...');
            // Ch·ªù cho ƒë·∫øn khi kh·ªüi t·∫°o xong
            while (isInitializing) {
                await sleep(1000);
            }
            console.log('‚úÖ H·ªá th·ªëng ƒë√£ kh·ªüi t·∫°o xong, s·ª≠ d·ª•ng instance hi·ªán t·∫°i');
            return;
        }

        // ƒê·∫∑t flag ƒë·ªÉ tr√°nh kh·ªüi t·∫°o nhi·ªÅu l·∫ßn
        isInitializing = true;

        if (forceRestart) {
            console.log('üîÑ Kh·ªüi t·∫°o l·∫°i h·ªá th·ªëng (restart mode)...');
        } else {
            console.log('üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o h·ªá th·ªëng...');
        }

        // Kh·ªüi t·∫°o Account Manager tr∆∞·ªõc (ch·ªâ khi kh√¥ng ph·∫£i restart)
        if (!forceRestart) {
            console.log('üë§ Kh·ªüi t·∫°o Account Manager...');
        } else {
            console.log('üë§ S·ª≠ d·ª•ng l·∫°i Account Manager hi·ªán t·∫°i...');
        }

        // Ch·ªâ kh·ªüi t·∫°o Account Manager khi kh√¥ng ph·∫£i restart
        if (!forceRestart) {
            const accountInitialized = await accountManager.initialize();
            if (!accountInitialized) {
                throw new Error('Kh√¥ng th·ªÉ kh·ªüi t·∫°o Account Manager');
            }
        }

        console.log('üåê Kh·ªüi t·∫°o GoLogin browser v√† ƒëƒÉng nh·∫≠p Canva...');
        const { browser, page } = await initializeGologinBrowser();
        currentBrowser = browser;
        currentPage = page;
        await currentPage.bringToFront();
        console.log('Tr√¨nh duy·ªát ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.');



        // --- Logic ki·ªÉm tra ƒëƒÉng nh·∫≠p ƒë√°ng tin c·∫≠y h∆°n ---
        console.log('Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p...');
        try {
            console.log('C·ªë g·∫Øng ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang qu·∫£n l√Ω th√†nh vi√™n ƒë·ªÉ ki·ªÉm tra ƒëƒÉng nh·∫≠p...');
            await currentPage.goto('https://www.canva.com/settings/people', {
                waitUntil: 'networkidle0',
                timeout: 30000
            });



            // S·ª≠ d·ª•ng clickElementByText cho n√∫t "M·ªùi th√†nh vi√™n" ƒë·ªÉ ki·ªÉm tra s·ª± t·ªìn t·∫°i
            const isInviteButtonVisible = await clickElementByText(currentPage, 'M·ªùi th√†nh vi√™n', '*', 10000); // Ch·ªâ ki·ªÉm tra s·ª± t·ªìn t·∫°i
            if (isInviteButtonVisible) {
                console.log('‚úÖ ƒê√£ ƒëƒÉng nh·∫≠p s·∫µn v√† ·ªü ƒë√∫ng trang qu·∫£n l√Ω th√†nh vi√™n. B·ªè qua c√°c b∆∞·ªõc ƒëƒÉng nh·∫≠p.');
                isInitializing = false; // CRITICAL FIX: Reset flag
                return; // Return s·ªõm khi ƒë√£ login
            } else {
                 console.log('‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c session ƒë√£ h·∫øt h·∫°n/kh√¥ng h·ª£p l·ªá. B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒëƒÉng nh·∫≠p ƒë·∫ßy ƒë·ªß...');
            }

        } catch (checkError) {
            console.log('Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c session ƒë√£ h·∫øt h·∫°n/kh√¥ng h·ª£p l·ªá. B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒëƒÉng nh·∫≠p ƒë·∫ßy ƒë·ªß...');
        }
        // --- K·∫øt th√∫c logic ki·ªÉm tra ƒëƒÉng nh·∫≠p ---


        // B∆∞·ªõc 1: ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p Canva
        console.log('ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p Canva...');
        await currentPage.goto('https://www.canva.com/login/', {
            waitUntil: 'domcontentloaded',
            timeout: 60000
        });

        await currentPage.evaluate(() => {
            window.scrollBy(0, window.innerHeight);
        });
        await sleep(500);

        // B∆∞·ªõc 2: T√¨m v√† click v√†o n√∫t "Ti·∫øp t·ª•c v·ªõi email" v·ªõi human behavior
        console.log('ü§ñ Th√™m human-like behavior tr∆∞·ªõc khi t√¨m n√∫t email...');

        // Random mouse movements ƒë·ªÉ tr√°nh detection
        for (let i = 0; i < 3; i++) {
            await randomMouseMovement(currentPage);
            await sleep(Math.random() * 1000 + 500);
        }

        // Human-like scroll
        await humanScroll(currentPage);

        console.log('T√¨m n√∫t "Ti·∫øp t·ª•c v·ªõi email"...');
        await sleep(2000 + Math.random() * 2000);

        let clickedContinueEmail = false;

        try {
            // T√¨m n√∫t th·ª© 3 v·ªõi text "Ti·∫øp t·ª•c v·ªõi email"
            const emailButton = await currentPage.evaluate(() => {
                const spans = document.querySelectorAll('span.khPe7Q');
                for (const span of spans) {
                    if (span.textContent && span.textContent.trim() === 'Ti·∫øp t·ª•c v·ªõi email') {
                        const button = span.closest('button');
                        if (button) {
                            button.setAttribute('data-email-login', 'found');
                            return true;
                        }
                    }
                }
                return false;
            });

            if (emailButton) {
                await currentPage.click('[data-email-login="found"]', { delay: 100 });
                console.log('‚úì ƒê√£ click n√∫t "Ti·∫øp t·ª•c v·ªõi email" th√†nh c√¥ng');
                clickedContinueEmail = true;
            }
        } catch (error) {
            console.log('L·ªói khi t√¨m n√∫t email:', error.message);
        }

        // Fallback: Ph∆∞∆°ng ph√°p ƒë√£ test th√†nh c√¥ng - Ph√¢n t√≠ch t·∫•t c·∫£ buttons
        if (!clickedContinueEmail) {
            console.log('üîç Fallback: S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ph√¢n t√≠ch buttons...');

            // Debug: Ch·ª•p screenshot ƒë·ªÉ xem trang hi·ªán t·∫°i (v·ªõi error handling)
            try {
                await currentPage.screenshot({ path: 'debug-canva-login.png', fullPage: true });
                console.log('üì∏ Debug screenshot: debug-canva-login.png');
            } catch (screenshotError) {
                console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ ch·ª•p screenshot:', screenshotError.message);
            }

            // Debug: Ki·ªÉm tra title v√† URL
            const currentTitle = await currentPage.title();
            const currentUrl = await currentPage.url();
            console.log('üìÑ Current title:', currentTitle);
            console.log('üîó Current URL:', currentUrl);

            // Debug: Ki·ªÉm tra c√≥ b·ªã Cloudflare block kh√¥ng
            if (currentTitle.includes('Just a moment') || currentTitle.includes('Attention Required') || currentTitle.includes('Checking your browser')) {
                console.log('üõ°Ô∏è DETECTED: Cloudflare protection active!');
                console.log('‚ö†Ô∏è Need to bypass Cloudflare first');
                throw new Error('Cloudflare protection detected. Cannot proceed with login.');
            }

            try {
                const allButtons = await currentPage.evaluate(() => {
                    const buttons = Array.from(document.querySelectorAll('button, a, div[role="button"], span[role="button"]'));
                    const buttonDetails = buttons.map((btn, index) => {
                        const rect = btn.getBoundingClientRect();
                        return {
                            index: index,
                            text: btn.textContent?.trim(),
                            tagName: btn.tagName,
                            className: btn.className,
                            id: btn.id,
                            visible: rect.width > 0 && rect.height > 0 && btn.offsetParent !== null,
                            x: rect.left + rect.width / 2,
                            y: rect.top + rect.height / 2
                        };
                    }).filter(btn => btn.visible);

                    // Debug: Log all button details
                    console.log('üîç All visible buttons:', buttonDetails.map(btn => ({
                        text: btn.text,
                        tagName: btn.tagName,
                        className: btn.className
                    })));

                    return buttonDetails.filter(btn => btn.text);
                });

                console.log(`üìã T√¨m th·∫•y ${allButtons.length} buttons visible`);

                // T√¨m button theo th·ª© t·ª± ∆∞u ti√™n
                const buttonTexts = [
                    'continue with email',
                    'ti·∫øp t·ª•c v·ªõi email',
                    'ti·∫øp t·ª•c v·ªõi t√†i kho·∫£n kh√°c',
                    'continue with another account'
                ];

                let targetButton = null;

                // T√¨m button ch√≠nh x√°c theo text
                for (const text of buttonTexts) {
                    targetButton = allButtons.find(btn =>
                        btn.text.toLowerCase() === text
                    );
                    if (targetButton) {
                        console.log(`‚úÖ T√¨m th·∫•y "${targetButton.text}" t·∫°i (${Math.round(targetButton.x)}, ${Math.round(targetButton.y)})`);
                        break;
                    }
                }

                // N·∫øu kh√¥ng t√¨m th·∫•y ch√≠nh x√°c, t√¨m button c√≥ ch·ª©a t·ª´ kh√≥a
                if (!targetButton) {
                    const keywords = ['email', 'ti·∫øp t·ª•c', 'continue', 't√†i kho·∫£n'];

                    for (const keyword of keywords) {
                        const buttons = allButtons.filter(btn =>
                            btn.text.toLowerCase().includes(keyword)
                        );

                        if (buttons.length > 0) {
                            targetButton = buttons[0];
                            console.log(`üìß T√¨m th·∫•y button ch·ª©a "${keyword}": "${targetButton.text}"`);
                            break;
                        }
                    }
                }

                if (targetButton) {
                    console.log(`üéØ Click "${targetButton.text}" t·∫°i (${Math.round(targetButton.x)}, ${Math.round(targetButton.y)})`);
                    await currentPage.mouse.click(targetButton.x, targetButton.y);
                    clickedContinueEmail = true;
                    console.log('‚úÖ ƒê√£ click button th√†nh c√¥ng!');
                }

            } catch (e) {
                console.log('‚ùå L·ªói ph√¢n t√≠ch buttons:', e.message);
            }
        }

        if (!clickedContinueEmail) {
            console.log('üîç Kh√¥ng t√¨m th·∫•y n√∫t b·∫±ng selector, th·ª≠ s·ª≠ d·ª•ng OCR...');

            // Fallback: S·ª≠ d·ª•ng OCR ƒë·ªÉ t√¨m v√† click n√∫t
            const ocrTexts = [
                'Ti·∫øp t·ª•c v·ªõi email',
                'Continue with email',
                'Ti·∫øp t·ª•c v·ªõi t√†i kho·∫£n kh√°c',
                'Continue with another account',
                'Email',
                'ƒêƒÉng nh·∫≠p b·∫±ng email'
            ];

            for (const text of ocrTexts) {
                console.log(`üîç OCR: T√¨m text "${text}"...`);
                const ocrClicked = await clickElementByText(currentPage, text, '*', 5000);
                if (ocrClicked) {
                    console.log(`‚úÖ OCR: ƒê√£ click th√†nh c√¥ng "${text}"`);
                    clickedContinueEmail = true;
                    break;
                }
            }

            if (!clickedContinueEmail) {
                // Th·ª≠ ch·ª•p screenshot ƒë·ªÉ debug
                try {
                    await currentPage.screenshot({ path: 'debug-login-failed.png', fullPage: true });
                    console.log('üì∏ ƒê√£ ch·ª•p screenshot debug: debug-login-failed.png');
                } catch (screenshotError) {
                    console.log('Kh√¥ng th·ªÉ ch·ª•p screenshot:', screenshotError.message);
                }

                throw new Error('Kh√¥ng th·ªÉ t√¨m th·∫•y n√∫t ƒëƒÉng nh·∫≠p b·∫±ng c·∫£ selector v√† OCR.');
            }
        }

        // Ch·ªù l√¢u h∆°n ƒë·ªÉ trang load ho√†n to√†n
        console.log('Ch·ªù trang load sau khi click "Ti·∫øp t·ª•c v·ªõi t√†i kho·∫£n kh√°c"...');
        await sleep(5000);

        // Ki·ªÉm tra URL hi·ªán t·∫°i
        console.log('Ki·ªÉm tra URL hi·ªán t·∫°i...');
        const currentUrl = currentPage.url();
        console.log('üîó URL hi·ªán t·∫°i:', currentUrl);

        // Sau khi click "Ti·∫øp t·ª•c v·ªõi t√†i kho·∫£n kh√°c", trang s·∫Ω quay v·ªÅ giao di·ªán ƒëƒÉng nh·∫≠p ban ƒë·∫ßu
        // C·∫ßn t√¨m l·∫°i n√∫t "Ti·∫øp t·ª•c v·ªõi email" ho·∫∑c "Continue with email"
        console.log('üîç T√¨m l·∫°i n√∫t "Ti·∫øp t·ª•c v·ªõi email" sau khi chuy·ªÉn giao di·ªán...');

        let foundEmailButton = false;
        const emailButtonTexts = [
            'Ti·∫øp t·ª•c v·ªõi email',
            'Continue with email',
            'Email',
            'ƒêƒÉng nh·∫≠p b·∫±ng email',
            'Log in with email'
        ];

        for (const buttonText of emailButtonTexts) {
            console.log(`üîç T√¨m n√∫t: "${buttonText}"`);
            const emailButtonClicked = await clickElementByText(currentPage, buttonText, 'button', 5000);
            if (emailButtonClicked) {
                console.log(`‚úÖ ƒê√£ click n√∫t "${buttonText}" th√†nh c√¥ng!`);
                foundEmailButton = true;
                break;
            }
        }

        if (!foundEmailButton) {
            console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t email, th·ª≠ ph√¢n t√≠ch l·∫°i t·∫•t c·∫£ buttons...');

            // Fallback: Ph√¢n t√≠ch l·∫°i t·∫•t c·∫£ buttons
            try {
                const allButtons = await currentPage.$$eval('button', buttons =>
                    buttons.filter(btn => btn.offsetParent !== null).map(btn => ({
                        text: btn.textContent.trim(),
                        x: btn.getBoundingClientRect().x + btn.getBoundingClientRect().width / 2,
                        y: btn.getBoundingClientRect().y + btn.getBoundingClientRect().height / 2
                    }))
                );

                console.log(`üìã T√¨m th·∫•y ${allButtons.length} buttons sau khi chuy·ªÉn giao di·ªán`);

                // T√¨m button c√≥ ch·ª©a "email" ho·∫∑c "ti·∫øp t·ª•c"
                const emailButton = allButtons.find(btn =>
                    btn.text.toLowerCase().includes('email') ||
                    btn.text.toLowerCase().includes('ti·∫øp t·ª•c') ||
                    btn.text.toLowerCase().includes('continue')
                );

                if (emailButton) {
                    console.log(`üéØ T√¨m th·∫•y button: "${emailButton.text}"`);
                    await currentPage.mouse.click(emailButton.x, emailButton.y);
                    foundEmailButton = true;
                    console.log('‚úÖ ƒê√£ click button email th√†nh c√¥ng!');
                }
            } catch (e) {
                console.log('‚ùå L·ªói ph√¢n t√≠ch buttons:', e.message);
            }
        }

        if (!foundEmailButton) {
            throw new Error('Kh√¥ng th·ªÉ t√¨m th·∫•y n√∫t email sau khi chuy·ªÉn giao di·ªán');
        }

        // Ch·ªù trang chuy·ªÉn sang form nh·∫≠p email
        console.log('‚è≥ Ch·ªù form nh·∫≠p email xu·∫•t hi·ªán...');
        await sleep(5000);

        // X√ìA TO√ÄN B·ªò LOGIC M·ªöI SAI - CH·ªà GI·ªÆ LOGIC C≈®

        console.log('ƒê√£ click "Continue with email" v√† tr∆∞·ªùng input email ƒë√£ s·∫µn s√†ng.');

        // CRITICAL FIX: S·ª≠ d·ª•ng getCurrentAccountForLogin() ƒë·ªÉ KH√îNG reload/logout
        const currentAccount = accountManager.getCurrentAccountForLogin();
        const email = currentAccount.username;

        if (!email) {
            throw new Error('Kh√¥ng c√≥ email ƒë·ªÉ ƒëƒÉng nh·∫≠p. Vui l√≤ng c·∫•u h√¨nh CANVA_EMAIL trong .env ho·∫∑c th√™m account v√†o Google Sheet.');
        }

        console.log(`üéØ S·ª≠ d·ª•ng email t·ª´ current account (KH√îNG reload): ${email} (ID ${currentAccount.id})`);

        // KH√îI PH·ª§C LOGIC C≈®: S·ª≠ d·ª•ng enterEmailHumanLike function
        console.log(`‚å®Ô∏è Nh·∫≠p email v·ªõi logic c≈©: ${email}`);
        const emailEntered = await enterEmailHumanLike(currentPage, email);

        if (!emailEntered) {
            throw new Error('Kh√¥ng th·ªÉ nh·∫≠p email v√†o form v·ªõi logic c≈©');
        }

        console.log(`‚úÖ ƒê√£ nh·∫≠p email th√†nh c√¥ng v·ªõi logic c≈©`);
        await sleep(300);

        // B∆∞·ªõc 4: Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c sau email
        console.log('Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c sau email...');
        await currentPage.keyboard.press('Enter');

        // Ch·ªù trang chuy·ªÉn ho·∫∑c tr∆∞·ªùng password xu·∫•t hi·ªán
        try {
            await currentPage.waitForNavigation({ waitUntil: 'networkidle0', timeout: 30000 });
            console.log('ƒê√£ chuy·ªÉn sang trang nh·∫≠p m·∫≠t kh·∫©u.');
        } catch (navError) {
            console.log('Kh√¥ng c√≥ navigation, c√≥ th·ªÉ tr∆∞·ªùng password ƒë√£ xu·∫•t hi·ªán tr√™n c√πng trang.');
            await sleep(2000);
        }



        // B∆∞·ªõc 5: Ch·ªù v√† nh·∫≠p m·∫≠t kh·∫©u v·ªõi th·ªùi gian ch·ªù d√†i h∆°n
        console.log('Ch·ªù input m·∫≠t kh·∫©u xu·∫•t hi·ªán v√† nh·∫≠p m·∫≠t kh·∫©u...');

        // Ch·ªù l√¢u h∆°n ƒë·ªÉ Canva load ho√†n to√†n (c√≥ th·ªÉ c√≥ redirect)
        await sleep(5000);

        // Ki·ªÉm tra URL hi·ªán t·∫°i
        const currentUrl2 = await currentPage.url();
        console.log('üîó URL hi·ªán t·∫°i:', currentUrl2);

        // N·∫øu b·ªã redirect, ch·ªù th√™m
        if (currentUrl2 !== 'https://www.canva.com/login/') {
            console.log('üìç ƒê√£ b·ªã redirect, ch·ªù trang m·ªõi load...');
            await sleep(3000);
        }

        // Th·ª≠ nhi·ªÅu selector kh√°c nhau cho tr∆∞·ªùng password
        let passwordInputSelector = null;
        const possiblePasswordSelectors = [
            'input[type="password"]',
            'input[name="password"]',
            'input[autocomplete="current-password"]',
            'input[placeholder*="password"]',
            'input[placeholder*="Password"]',
            'input[placeholder="Enter password"]',
            'input.bCVoGQ',
            'input[id*=":r"]',
            'input[placeholder*="m·∫≠t kh·∫©u"]',
            'input[autocomplete="password"]',
            'input[id*="password"]'
        ];

        console.log('ƒêang t√¨m tr∆∞·ªùng password...');
        for (const selector of possiblePasswordSelectors) {
            try {
                console.log(`Th·ª≠ selector: ${selector}`);
                await currentPage.waitForSelector(selector, { visible: true, timeout: 8000 });
                passwordInputSelector = selector;
                console.log(`‚úì T√¨m th·∫•y tr∆∞·ªùng password v·ªõi selector: ${selector}`);
                break;
            } catch (e) {
                console.log(`‚úó Kh√¥ng t√¨m th·∫•y v·ªõi selector: ${selector}`);
            }
        }

        // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m b·∫±ng c√°ch kh√°c
        if (!passwordInputSelector) {
            console.log('Th·ª≠ t√¨m tr∆∞·ªùng password b·∫±ng c√°ch kh√°c...');
            try {
                const foundByEvaluate = await currentPage.evaluate(() => {
                    const inputs = document.querySelectorAll('input');
                    for (let input of inputs) {
                        if (input.type === 'password' ||
                            input.name.toLowerCase().includes('password') ||
                            input.placeholder.toLowerCase().includes('password') ||
                            input.id.toLowerCase().includes('password')) {
                            input.setAttribute('data-temp-password', 'found');
                            return true;
                        }
                    }
                    return false;
                });

                if (foundByEvaluate) {
                    passwordInputSelector = '[data-temp-password="found"]';
                    console.log('‚úì T√¨m th·∫•y tr∆∞·ªùng password b·∫±ng JavaScript evaluation');
                }
            } catch (evalError) {
                console.log('L·ªói khi t√¨m password b·∫±ng evaluation:', evalError.message);
            }
        }

        if (!passwordInputSelector) {
            // Ki·ªÉm tra xem c√≥ ph·∫£i Canva y√™u c·∫ßu verification kh√¥ng
            const pageContent = await currentPage.content();
            const title = await currentPage.title();

            console.log('üìÑ Title hi·ªán t·∫°i:', title);

            if (title.includes('Verify') || pageContent.includes('verify') || pageContent.includes('verification')) {
                console.log('üìß Canva y√™u c·∫ßu email verification. C·∫ßn ki·ªÉm tra email ƒë·ªÉ verify.');

                // Ch·ª•p screenshot
                await currentPage.screenshot({ path: 'canva-verification-required.png', fullPage: true });
                console.log('üì∏ Screenshot: canva-verification-required.png');

                throw new Error('Canva y√™u c·∫ßu email verification. Vui l√≤ng ki·ªÉm tra email v√† verify tr∆∞·ªõc khi ti·∫øp t·ª•c.');

            } else if (title.includes('Dashboard') || title.includes('Home') || currentUrl.includes('canva.com/') && !currentUrl.includes('login')) {
                console.log('üéâ C√≥ th·ªÉ ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng! Ki·ªÉm tra...');

                // Th·ª≠ t√¨m elements c·ªßa dashboard
                const isDashboard = await currentPage.evaluate(() => {
                    return document.querySelector('[data-testid="dashboard"]') ||
                           document.querySelector('.dashboard') ||
                           document.body.textContent.includes('Create a design') ||
                           document.body.textContent.includes('T·∫°o thi·∫øt k·∫ø');
                });

                if (isDashboard) {
                    console.log('‚úÖ ƒê√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v√†o Canva!');
                    return; // Tho√°t kh·ªèi function, ƒëƒÉng nh·∫≠p th√†nh c√¥ng
                }
            }

            // Ch·ª•p screenshot ƒë·ªÉ debug
            await currentPage.screenshot({ path: 'password-debug.png', fullPage: true });
            console.log('üì∏ Debug screenshot: password-debug.png');

            throw new Error('Kh√¥ng th·ªÉ t√¨m th·∫•y tr∆∞·ªùng input password. C√≥ th·ªÉ c·∫ßn verification ho·∫∑c c√≥ v·∫•n ƒë·ªÅ kh√°c.');
        }

        // S·ª≠ d·ª•ng password t·ª´ account manager
        const password = currentAccount ? currentAccount.password : process.env.CANVA_PASSWORD;

        if (!password) {
            throw new Error('Kh√¥ng c√≥ password ƒë·ªÉ ƒëƒÉng nh·∫≠p. Vui l√≤ng c·∫•u h√¨nh password trong Google Sheet.');
        }

        console.log(`Nh·∫≠p password cho account: ${email}...`);
        await currentPage.type(passwordInputSelector, password.toString(), { delay: 20 });
        await sleep(300);

        // B∆∞·ªõc 6: Nh·∫•n Enter ƒë·ªÉ ƒëƒÉng nh·∫≠p
        console.log('Nh·∫•n Enter ƒë·ªÉ ƒëƒÉng nh·∫≠p...');
        await currentPage.keyboard.press('Enter');

        // Ch·ªù ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        try {
            await currentPage.waitForNavigation({ waitUntil: 'networkidle0', timeout: 60000 });
            console.log('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
        } catch (loginError) {
            console.log('Ch·ªù th√™m th·ªùi gian ƒë·ªÉ ƒëƒÉng nh·∫≠p ho√†n t·∫•t...');
            await sleep(5000);
        }



        // B∆∞·ªõc 7: ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang qu·∫£n l√Ω th√†nh vi√™n (n·∫øu ch∆∞a ·ªü ƒë√≥)
        console.log('ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang qu·∫£n l√Ω th√†nh vi√™n Canva (settings/people)...');
        await currentPage.goto('https://www.canva.com/settings/people', { waitUntil: 'networkidle0', timeout: 60000 });

        // Ch·ªù trang load ho√†n to√†n
        await sleep(5000);

        // S·ª≠ d·ª•ng h√†m click c·ª• th·ªÉ cho n√∫t "M·ªùi th√†nh vi√™n"
        let isInviteButtonReady = await clickInviteButton(currentPage);

        // N·∫øu kh√¥ng t√¨m th·∫•y b·∫±ng selector c·ª• th·ªÉ, th·ª≠ c√°c text kh√°c
        if (!isInviteButtonReady) {
            const possibleInviteTexts = ['Invite members', 'Add members', 'Invite people'];
            for (const inviteText of possibleInviteTexts) {
                console.log(`Th·ª≠ t√¨m n√∫t v·ªõi text: "${inviteText}"`);
                isInviteButtonReady = await clickElementByText(currentPage, inviteText, '*', 5000);
                if (isInviteButtonReady) {
                    console.log(`‚úì T√¨m th·∫•y n√∫t m·ªùi v·ªõi text: "${inviteText}"`);
                    break;
                }
            }
        }

        // ƒê√≥ng popup n·∫øu ƒë√£ m·ªü
        if (isInviteButtonReady) {
            await currentPage.keyboard.press('Escape');
            await sleep(1000);
        }

        if (!isInviteButtonReady) {
            console.log('Kh√¥ng t√¨m th·∫•y n√∫t m·ªùi th√†nh vi√™n, nh∆∞ng v·∫´n ti·∫øp t·ª•c...');
        } else {
            console.log('ƒê√£ ƒë·∫øn trang qu·∫£n l√Ω th√†nh vi√™n v√† t√¨m th·∫•y n√∫t m·ªùi.');
        }

        // L∆∞u session data sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        console.log('L∆∞u session data sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng...');
        await saveSessionData(currentPage);

        // Reset flag khi kh·ªüi t·∫°o th√†nh c√¥ng
        isInitializing = false;
        console.log('‚úÖ H·ªá th·ªëng ƒë√£ kh·ªüi t·∫°o ho√†n t·∫•t');

    } catch (error) {
        // Reset flag khi c√≥ l·ªói
        isInitializing = false;
        console.error('L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh kh·ªüi t·∫°o tr√¨nh duy·ªát ho·∫∑c ƒëƒÉng nh·∫≠p:', error);
        if (currentPage) {
            console.error('URL hi·ªán t·∫°i khi l·ªói:', currentPage.url());
        }
        throw error;
    }
}

// Endpoint API ƒë·ªÉ th√™m th√†nh vi√™n
app.get('/apicanva', async (req, res) => {
    const { email } = req.query;

    if (!email) {
        return res.status(400).send('Tham s·ªë email b·ªã thi·∫øu. S·ª≠ d·ª•ng: /apicanva?email=abc@gmail.com');
    }

    if (!currentPage || currentPage.isClosed()) {
        console.warn('Page instance kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë√≥ng. Th·ª≠ kh·ªüi t·∫°o l·∫°i tr√¨nh duy·ªát v√† ƒëƒÉng nh·∫≠p...');
        try {
            await setupBrowserAndLogin();
            if (!currentPage || currentPage.isClosed()) {
                 return res.status(500).send('Kh√¥ng th·ªÉ kh√¥i ph·ª•c tr·∫°ng th√°i tr√¨nh duy·ªát. Vui l√≤ng ki·ªÉm tra log server.');
            }
        } catch (reloginError) {
            return res.status(500).send(`Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p l·∫°i Canva ƒë·ªÉ th√™m th√†nh vi√™n. L·ªói: ${reloginError.message}`);
        }
    }

    try {
        console.log(`ƒêang c·ªë g·∫Øng th√™m th√†nh vi√™n: ${email}`);

        // Lu√¥n ƒëi·ªÅu h∆∞·ªõng v·ªÅ trang settings/people cho m·ªói request m·ªõi
        console.log('ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang qu·∫£n l√Ω th√†nh vi√™n...');
        await currentPage.goto('https://www.canva.com/settings/people', {
            waitUntil: 'networkidle0',
            timeout: 60000
        });
        await sleep(3000); // Ch·ªù trang load ho√†n to√†n

        // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ trang load
        await sleep(2000);

        // B∆∞·ªõc 8: Click "M·ªùi th√†nh vi√™n" b·∫±ng selector c·ª• th·ªÉ
        console.log('T√¨m v√† click n√∫t m·ªùi th√†nh vi√™n...');

        let clickedInviteMember = await clickInviteButton(currentPage);

        // N·∫øu kh√¥ng th√†nh c√¥ng, th·ª≠ c√°c text kh√°c
        if (!clickedInviteMember) {
            const possibleInviteTexts = ['Invite members', 'Add members', 'Invite people'];
            for (const inviteText of possibleInviteTexts) {
                console.log(`Th·ª≠ click v·ªõi text: "${inviteText}"`);
                clickedInviteMember = await clickElementByText(currentPage, inviteText, '*', 5000);
                if (clickedInviteMember) break;
            }
        }

        if (!clickedInviteMember) {
            throw new Error('Kh√¥ng th·ªÉ t√¨m th·∫•y v√† click n√∫t m·ªùi th√†nh vi√™n.');
        }
        await sleep(2000); // T·∫°m d·ª´ng cho popup ·ªïn ƒë·ªãnh



        // B∆∞·ªõc 9: Click "M·ªùi qua email"
        console.log('Click "M·ªùi qua email"...');

        const clickedInviteByEmail = await clickInviteByEmailButton(currentPage);
        if (!clickedInviteByEmail) {
            // Th·ª≠ fallback v·ªõi text search
            const fallbackClicked = await clickElementByText(currentPage, 'M·ªùi qua email');
            if (!fallbackClicked) {
                throw new Error('Kh√¥ng th·ªÉ click tab "M·ªùi qua email".');
            }
        }
        await sleep(1500); // T·∫°m d·ª´ng ng·∫Øn cho tr∆∞·ªùng nh·∫≠p li·ªáu xu·∫•t hi·ªán

        // B∆∞·ªõc 10: Nh·∫≠p email
        console.log('Nh·∫≠p email:', email);

        const emailInputSuccess = await typeEmailInInput(currentPage, email);
        if (!emailInputSuccess) {
            throw new Error('Kh√¥ng th·ªÉ nh·∫≠p email v√†o tr∆∞·ªùng input');
        }

        // B∆∞·ªõc 11: Click n√∫t "G·ª≠i l·ªùi m·ªùi"
        console.log('Click n√∫t "G·ª≠i l·ªùi m·ªùi"...');

        const sendClicked = await clickSendInviteButton(currentPage);
        if (!sendClicked) {
            // Fallback: th·ª≠ nh·∫•n Enter
            console.log('Fallback: Nh·∫•n Enter ƒë·ªÉ g·ª≠i l·ªùi m·ªùi...');
            await currentPage.keyboard.press('Enter');
        }

        // Ch·ªù cho popup ƒë√≥ng l·∫°i v√† x·ª≠ l√Ω k·∫øt qu·∫£
        await sleep(3000); // ƒê·ª£i Canva x·ª≠ l√Ω v√† hi·ªÉn th·ªã k·∫øt qu·∫£

        console.log(`ƒê√£ g·ª≠i l·ªùi m·ªùi th√†nh c√¥ng ƒë·∫øn ${email}`);

        res.send(`ƒê√£ m·ªùi th√†nh c√¥ng ${email} v√†o Canva.`);

        // ƒê√≥ng t·∫•t c·∫£ popup v√† chu·∫©n b·ªã cho request ti·∫øp theo
        await currentPage.keyboard.press('Escape'); // ƒê√≥ng popup hi·ªán t·∫°i
        await sleep(500);
        await currentPage.keyboard.press('Escape'); // ƒê√≥ng th√™m l·∫ßn n·ªØa ƒë·ªÉ ch·∫Øc ch·∫Øn
        await sleep(1000);

        // Quay v·ªÅ trang ch√≠nh ƒë·ªÉ s·∫µn s√†ng cho request ti·∫øp theo
        console.log('Chu·∫©n b·ªã s·∫µn s√†ng cho request ti·∫øp theo...');

    } catch (error) {
        console.error(`L·ªói khi th√™m th√†nh vi√™n ${email}:`, error);
        res.status(500).send(`Kh√¥ng th·ªÉ m·ªùi ${email}. L·ªói: ${error.message}`);
    }
});

// X·ª≠ l√Ω tho√°t ·ª©ng d·ª•ng an to√†n
process.on('SIGINT', async () => {
    console.log('\nƒêang tho√°t ·ª©ng d·ª•ng...');
    await closeBrowser();
    process.exit(0);
});



// API endpoint ƒë·ªÉ th√™m th√†nh vi√™n 1 th√°ng (SYNC - ƒë·ª£i ho√†n th√†nh)
app.get('/addmail1m-sync', async (req, res) => {
    try {
        const email = req.query.email;

        if (!email) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu tham s·ªë email. S·ª≠ d·ª•ng: /addmail1m-sync?email=abc@gmail.com'
            });
        }

        console.log(`üîÑ SYNC API: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ${email} (1 th√°ng)...`);

        // Pre-check: Kh√¥ng c√≤n account kh·∫£ d·ª•ng => tr·∫£ l·ªói 503
        try { await accountManager.reloadAllAccountsFromSheet(); } catch {}
        const hasAvailable = accountManager.accounts.some(acc => acc.status === 'On' && acc.currentCount < acc.maxLimit);
        if (!hasAvailable) {
            return res.status(503).json({
                success: false,
                message: 'Kh√¥ng c√≤n t√†i kho·∫£n On kh·∫£ d·ª•ng ƒë·ªÉ m·ªùi. Vui l√≤ng b·ªï sung t√†i kho·∫£n ho·∫∑c ch·ªù t√†i kho·∫£n reset.'
            });
        }

        // Th√™m v√†o h√†ng ƒë·ª£i v√† ƒë·ª£i ho√†n th√†nh
        const taskId = queueManager.addTask({
            email: email,
            duration: '1m'
        });

        // ƒê·ª£i task ho√†n th√†nh
        const result = await waitForTaskCompletion(taskId);

        // Tr·∫£ response v·ªõi k·∫øt qu·∫£ chi ti·∫øt
        res.json({
            success: result.success,
            message: result.message,
            taskId: taskId,
            details: {
                email: email,
                duration: '1 th√°ng',
                loggedToSheets: result.loggedToSheets || false,
                accountUsed: result.accountUsed || 'unknown',
                completedAt: new Date().toISOString(),
                processingTime: result.processingTime || 'unknown'
            }
        });

    } catch (error) {
        console.error('L·ªói API addmail1m-sync:', error.message);
        res.status(500).json({
            success: false,
            message: `L·ªói: ${error.message}`,
            details: {
                email: req.query.email,
                duration: '1 th√°ng',
                error: error.message,
                failedAt: new Date().toISOString()
            }
        });
    }
});



// API endpoint ƒë·ªÉ th√™m th√†nh vi√™n 1 nƒÉm (ASYNC - tr·∫£ response ngay)
app.get('/addmail1y', async (req, res) => {
    try {
        const email = req.query.email;

        if (!email) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu tham s·ªë email. S·ª≠ d·ª•ng: /addmail1y?email=abc@gmail.com'
            });
        }

        // Pre-check: Kh√¥ng c√≤n account kh·∫£ d·ª•ng => b√°o l·ªói ngay
        try { await accountManager.reloadAllAccountsFromSheet(); } catch {}
        const hasAvailableY = accountManager.accounts.some(acc => acc.status === 'On' && acc.currentCount < acc.maxLimit);


        res.setHeader('Content-Type', 'text/event-stream');
        res.setHeader('Cache-Control', 'no-cache');
        res.setHeader('Connection', 'keep-alive');
        res.flushHeaders?.();

        // Pre-check: c√≤n account kh·∫£ d·ª•ng kh√¥ng
        try { await accountManager.reloadAllAccountsFromSheet(); } catch {}
        const hasAvailable = accountManager.accounts.some(acc => acc.status === 'On' && acc.currentCount < acc.maxLimit);
        if (!hasAvailable) {
            res.write(`event: error\ndata: ${JSON.stringify({ message: 'Kh√¥ng c√≤n t√†i kho·∫£n On kh·∫£ d·ª•ng' })}\n\n`);
            res.end();
            return;
        }


        if (!hasAvailableY) {
            return res.status(503).json({
                success: false,
                message: 'Kh√¥ng c√≤n t√†i kho·∫£n On kh·∫£ d·ª•ng ƒë·ªÉ m·ªùi. Vui l√≤ng b·ªï sung t√†i kho·∫£n ho·∫∑c ch·ªù t√†i kho·∫£n reset.'
            });
        }

        // Th√™m v√†o h√†ng ƒë·ª£i
        const taskId = queueManager.addTask({
            email: email,
            duration: '1y'
        });

        res.json({
            success: true,
            message: `ƒê√£ th√™m ${email} v√†o h√†ng ƒë·ª£i 1 nƒÉm`,
            taskId: taskId,
            queueStatus: queueManager.getQueueStatus()
        });

    } catch (error) {
        console.error('L·ªói API addmail1y:', error.message);
        res.status(500).json({
            success: false,
            message: `L·ªói: ${error.message}`
        });
    }
});

// API endpoint ƒë·ªÉ th√™m th√†nh vi√™n 1 nƒÉm (SYNC - ƒë·ª£i ho√†n th√†nh)
app.get('/addmail1y-sync', async (req, res) => {
    try {
        const email = req.query.email;

        if (!email) {
            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu tham s·ªë email. S·ª≠ d·ª•ng: /addmail1y-sync?email=abc@gmail.com'
            });
        }

        console.log(`üîÑ SYNC API: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ${email} (1 nƒÉm)...`);

        // Pre-check: Kh√¥ng c√≤n account kh·∫£ d·ª•ng => tr·∫£ l·ªói 503
        try { await accountManager.reloadAllAccountsFromSheet(); } catch {}
        const hasAvailableY2 = accountManager.accounts.some(acc => acc.status === 'On' && acc.currentCount < acc.maxLimit);
        if (!hasAvailableY2) {
            return res.status(503).json({
                success: false,
                message: 'Kh√¥ng c√≤n t√†i kho·∫£n On kh·∫£ d·ª•ng ƒë·ªÉ m·ªùi. Vui l√≤ng b·ªï sung t√†i kho·∫£n ho·∫∑c ch·ªù t√†i kho·∫£n reset.'
            });
        }

        // Th√™m v√†o h√†ng ƒë·ª£i v√† ƒë·ª£i ho√†n th√†nh
        const taskId = queueManager.addTask({
            email: email,
            duration: '1y'
        });

        // ƒê·ª£i task ho√†n th√†nh
        const result = await waitForTaskCompletion(taskId);

        // Tr·∫£ response v·ªõi k·∫øt qu·∫£ chi ti·∫øt
        res.json({
            success: result.success,
            message: result.message,
            taskId: taskId,
            details: {
                email: email,
                duration: '1 nƒÉm',
                loggedToSheets: result.loggedToSheets || false,
                accountUsed: result.accountUsed || 'unknown',
                completedAt: new Date().toISOString(),
                processingTime: result.processingTime || 'unknown'
            }
        });

    } catch (error) {
        console.error('L·ªói API addmail1y-sync:', error.message);
        res.status(500).json({
            success: false,
            message: `L·ªói: ${error.message}`,
            details: {
                email: req.query.email,
                duration: '1 nƒÉm',
                error: error.message,
                failedAt: new Date().toISOString()
            }
        });
    }
});

// API endpoint ƒë·ªÉ xem tr·∫°ng th√°i h√†ng ƒë·ª£i
app.get('/queue-status', (req, res) => {
    res.json({
        success: true,
        data: queueManager.getQueueStatus()
    });
});

// API endpoint ƒë·ªÉ xem th·ªëng k√™ Google Sheets
app.get('/sheets-stats', async (req, res) => {
    try {
        const stats = await sheetsManager.getStats();
        res.json({
            success: true,
            data: stats
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// API endpoint ƒë·ªÉ xem th·ªëng k√™ accounts
app.get('/account-stats', async (req, res) => {
    try {
        const stats = await accountManager.getAccountStats();
        res.json({
            success: true,
            data: stats
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// API endpoint ƒë·ªÉ th√™m account m·ªõi
app.post('/add-account', async (req, res) => {
    try {
        const { username, password, maxLimit } = req.body;

        if (!username || !password) {

// Bind API routes from env (sync endpoints)
if (API_ENABLE_1M) {
    app.get(API_ROUTE_1M, apiAuth, async (req, res) => {
        try {
            const email = req.query.email;

            if (!email) {
                return res.status(400).json({
                    success: false,
                    message: `Thi·∫øu tham s·ªë email. S·ª≠ d·ª•ng: ${API_ROUTE_1M}?email=abc@gmail.com`
                });
            }

            console.log(`üîÑ SYNC API: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ${email} (1 th√°ng)...`);

            // Th√™m v√†o h√†ng ƒë·ª£i v√† ƒë·ª£i ho√†n th√†nh
            const taskId = queueManager.addTask({ email: email, duration: '1m' });

            const result = await waitForTaskCompletion(taskId);

            res.json({
                success: result.success,
                message: result.message,
                taskId: taskId,
                details: {
                    email: email,
                    duration: '1 th√°ng',
                    loggedToSheets: result.loggedToSheets || false,
                    accountUsed: result.accountUsed || 'unknown',
                    completedAt: new Date().toISOString(),
                    processingTime: result.processingTime || 'unknown'
                }
            });
        } catch (error) {
            console.error('L·ªói API 1m-sync:', error.message);
            res.status(500).json({ success: false, message: `L·ªói: ${error.message}` });
        }
    });
}

if (API_ENABLE_1Y) {
    app.get(API_ROUTE_1Y, apiAuth, async (req, res) => {
        try {
            const email = req.query.email;

            if (!email) {
                return res.status(400).json({
                    success: false,
                    message: `Thi·∫øu tham s·ªë email. S·ª≠ d·ª•ng: ${API_ROUTE_1Y}?email=abc@gmail.com`
                });
            }

            console.log(`üîÑ SYNC API: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ${email} (1 nƒÉm)...`);

            const taskId = queueManager.addTask({ email: email, duration: '1y' });
            const result = await waitForTaskCompletion(taskId);

            res.json({
                success: result.success,
                message: result.message,
                taskId: taskId,
                details: {
                    email: email,
                    duration: '1 nƒÉm',
                    loggedToSheets: result.loggedToSheets || false,
                    accountUsed: result.accountUsed || 'unknown',
                    completedAt: new Date().toISOString(),
                    processingTime: result.processingTime || 'unknown'
                }
            });
        } catch (error) {
            console.error('L·ªói API 1y-sync:', error.message);
            res.status(500).json({ success: false, message: `L·ªói: ${error.message}` });
        }
    });
}

            return res.status(400).json({
                success: false,
                message: 'Thi·∫øu username ho·∫∑c password'
            });
        }

        const result = await accountManager.addAccount(username, password, maxLimit || 100);

        if (result) {
            res.json({
                success: true,
                message: `ƒê√£ th√™m t√†i kho·∫£n ${username} th√†nh c√¥ng`
            });
        } else {
            res.status(500).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ th√™m t√†i kho·∫£n'
            });
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// API endpoint ƒë·ªÉ reset t·∫•t c·∫£ accounts
app.post('/reset-accounts', async (req, res) => {
    try {
        const result = await accountManager.resetAllAccounts();

        if (result) {
            res.json({
                success: true,
                message: 'ƒê√£ reset t·∫•t c·∫£ accounts v·ªÅ 0'
            });
        } else {
            res.status(500).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ reset accounts'
            });
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// API endpoint ƒë·ªÉ test cookies
app.post('/test-cookies', async (req, res) => {
    try {
        if (!currentPage || !currentBrowser) {
            return res.status(500).json({
                success: false,
                message: 'Tr√¨nh duy·ªát ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o'
            });
        }

        console.log('Test load cookies...');
        const cookiesLoaded = await loadCookiesOnly(currentPage);

        if (cookiesLoaded) {
            // Ki·ªÉm tra xem c√≥ ƒëƒÉng nh·∫≠p kh√¥ng
            await currentPage.goto('https://www.canva.com/settings/people', { waitUntil: 'networkidle0', timeout: 30000 });
            await sleep(2000);

            const hasInviteButton = await clickElementByText(currentPage, 'M·ªùi th√†nh vi√™n', '*', 5000);

            if (hasInviteButton) {
                // ƒê√≥ng popup n·∫øu c√≥
                await currentPage.keyboard.press('Escape');
                await sleep(1000);

                res.json({
                    success: true,
                    message: 'Cookies ho·∫°t ƒë·ªông t·ªët - ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng'
                });
            } else {
                res.json({
                    success: false,
                    message: 'Cookies ƒë√£ load nh∆∞ng ch∆∞a ƒëƒÉng nh·∫≠p ƒë∆∞·ª£c'
                });
            }
        } else {
            res.json({
                success: false,
                message: 'Kh√¥ng th·ªÉ load cookies'
            });
        }

    } catch (error) {
        console.error('L·ªói khi test cookies:', error.message);
        res.status(500).json({
            success: false,
            message: `L·ªói: ${error.message}`
        });
    }
});

process.on('SIGTERM', async () => {
    console.log('\nƒêang tho√°t ·ª©ng d·ª•ng...');
    await closeBrowser();
    process.exit(0);
});

// TEST API ƒë·ªÉ ki·ªÉm tra sync functionality (mock data)
app.get('/test-sync', async (req, res) => {
    try {
        const email = req.query.email || 'test@gmail.com';

        console.log(`üß™ TEST SYNC API: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ${email}...`);

        // T·∫°o mock task
        const taskId = queueManager.addTask({
            email: email,
            duration: '1m'
        });

        // Simulate task completion sau 5 gi√¢y
        setTimeout(() => {
            const mockResult = {
                success: true,
                message: `ƒê√£ m·ªùi th√†nh c√¥ng ${email} v√† ghi log th√†nh c√¥ng (MOCK)`,
                loggedToSheets: true,
                accountUsed: 'phamanhha.edu@hotmail.com',
                processingTime: '5s'
            };

            taskResults.set(taskId, mockResult);
            console.log(`‚úÖ Mock task ${taskId} completed for ${email}`);
        }, 5000);

        // ƒê·ª£i task ho√†n th√†nh
        const result = await waitForTaskCompletion(taskId, 10000); // 10s timeout

        // Tr·∫£ response v·ªõi k·∫øt qu·∫£ chi ti·∫øt
        res.json({
            success: result.success,
            message: result.message,
            taskId: taskId,
            details: {
                email: email,
                duration: '1 th√°ng (test)',
                loggedToSheets: result.loggedToSheets || false,
                accountUsed: result.accountUsed || 'unknown',
                completedAt: new Date().toISOString(),
                processingTime: result.processingTime || 'unknown'
            }
        });

    } catch (error) {
        console.error('L·ªói TEST SYNC API:', error.message);
        res.status(500).json({
            success: false,
            message: `L·ªói: ${error.message}`,
            details: {
                email: req.query.email,
                duration: '1 th√°ng (test)',
                error: error.message,
                failedAt: new Date().toISOString()
            }
        });
    }
});

app.listen(port, () => {
    console.log(`Server ƒëang l·∫Øng nghe t·∫°i http://localhost:${port}`);
    console.log('B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o tr√¨nh duy·ªát v√† ƒëƒÉng nh·∫≠p Canva...');
    setupBrowserAndLogin().catch(err => {
        console.error('·ª®ng d·ª•ng kh√¥ng th·ªÉ kh·ªüi ƒë·ªông do l·ªói ƒëƒÉng nh·∫≠p tr√¨nh duy·ªát ban ƒë·∫ßu:', err);
    });
});