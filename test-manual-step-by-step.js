require('dotenv').config();
const AccountManager = require('./account-manager');

async function testStepByStep() {
    try {
        console.log('üéØ === TEST MANUAL T·ª™NG B∆Ø·ªöC ===');
        console.log('M·ª•c ti√™u: Test logic ch·ªçn t√†i kho·∫£n v√† ƒë·∫øm count ch√≠nh x√°c\n');
        
        // Kh·ªüi t·∫°o
        const accountManager = new AccountManager();
        await accountManager.initialize();
        
        console.log('üìä TR·∫†NG TH√ÅI BAN ƒê·∫¶U:');
        accountManager.accounts.forEach(acc => {
            console.log(`  ID: ${acc.id} | ${acc.username} - ${acc.currentCount}/${acc.maxLimit} - ${acc.status}`);
        });
        
        // Test t·ª´ng b∆∞·ªõc
        const testSteps = [
            { step: 1, email: 'test-step-1@gmail.com', expectedId: '1' },
            { step: 2, email: 'test-step-2@gmail.com', expectedId: '1' },
            { step: 3, email: 'test-step-3@gmail.com', expectedId: '1' }, // ID 1 ƒë·∫°t limit (3/3)
            { step: 4, email: 'test-step-4@gmail.com', expectedId: '2' }, // Chuy·ªÉn sang ID 2
            { step: 5, email: 'test-step-5@gmail.com', expectedId: '2' }, // ID 2 ƒë·∫°t limit (2/2)
            { step: 6, email: 'test-step-6@gmail.com', expectedId: '3' }, // Chuy·ªÉn sang ID 3
            { step: 7, email: 'test-step-7@gmail.com', expectedId: '3' },
            { step: 8, email: 'test-step-8@gmail.com', expectedId: '3' },
            { step: 9, email: 'test-step-9@gmail.com', expectedId: '3' }, // ID 3 ƒë·∫°t limit (4/4)
            { step: 10, email: 'test-step-10@gmail.com', expectedId: '4' }, // Chuy·ªÉn sang ID 4
        ];
        
        console.log('\nüß™ B·∫ÆT ƒê·∫¶U TEST T·ª™NG B∆Ø·ªöC:\n');
        
        for (const test of testSteps) {
            console.log(`--- STEP ${test.step}: ${test.email} ---`);
            
            try {
                // 1. ƒê·∫£m b·∫£o c√≥ t√†i kho·∫£n kh·∫£ d·ª•ng
                const account = await accountManager.ensureActiveAccount();
                console.log(`üìä T√†i kho·∫£n ƒë∆∞·ª£c ch·ªçn: ID ${account.id} | ${account.username} (${account.currentCount}/${account.maxLimit}) - ${account.status}`);
                
                // Ki·ªÉm tra ID c√≥ ƒë√∫ng nh∆∞ mong ƒë·ª£i
                if (account.id === test.expectedId) {
                    console.log(`‚úÖ ƒê√öNG: Ch·ªçn ID ${account.id} nh∆∞ mong ƒë·ª£i`);
                } else {
                    console.log(`‚ùå SAI: Mong ƒë·ª£i ID ${test.expectedId}, nh∆∞ng ch·ªçn ID ${account.id}`);
                }
                
                // 2. Log email
                const logResult = await accountManager.logEmailToSequentialColumns(test.email, '1m');
                console.log(`üìù Log email: ${logResult ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}`);
                
                // 3. TƒÉng count
                const countResult = await accountManager.incrementSuccessCount();
                console.log(`üìä TƒÉng count: ${countResult ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}`);
                
                // 4. Hi·ªÉn th·ªã k·∫øt qu·∫£
                const finalAccount = accountManager.currentAccount;
                console.log(`üìä K·∫øt qu·∫£: ID ${finalAccount.id} | ${finalAccount.username} (${finalAccount.currentCount}/${finalAccount.maxLimit}) - ${finalAccount.status}`);
                
                // 5. Ki·ªÉm tra logic chuy·ªÉn t√†i kho·∫£n
                if (finalAccount.currentCount >= finalAccount.maxLimit) {
                    console.log(`üö´ ID ${finalAccount.id} ƒë√£ ƒë·∫°t limit ‚Üí S·∫Ω chuy·ªÉn sang ID kh√°c ·ªü step ti·∫øp theo`);
                }
                
                console.log('');
                
                // Ch·ªù 1 gi√¢y gi·ªØa c√°c step
                await new Promise(resolve => setTimeout(resolve, 1000));
                
            } catch (error) {
                console.log(`‚ùå STEP ${test.step} th·∫•t b·∫°i: ${error.message}\n`);
                break;
            }
        }
        
        console.log('üéØ === K·∫æT TH√öC TEST ===');
        
        // Hi·ªÉn th·ªã tr·∫°ng th√°i cu·ªëi
        console.log('\nüìä TR·∫†NG TH√ÅI CU·ªêI:');
        accountManager.accounts.forEach(acc => {
            console.log(`  ID: ${acc.id} | ${acc.username} - ${acc.currentCount}/${acc.maxLimit} - ${acc.status}`);
        });
        
    } catch (error) {
        console.error('‚ùå L·ªói test:', error.message);
    }
}

// Ch·∫°y test
testStepByStep();
